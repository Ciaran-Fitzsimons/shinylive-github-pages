---
title: "shinylive-github-pages"
format:
  html: 
    grid:
      body-width: 1400px
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
---

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
library(shiny)
library(plotly)
library(tidyverse)
library(readxl)
library(scales)
library(ggplot2)

ui <- fluidPage(
  tags$style(
    HTML("
      .output-wrapper {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
      }
      h4 {
        margin-right: 10px;
      }
    ")
  ),
  
  titlePanel("Football stats app"),
  
  tabsetPanel(
    tabPanel("Set-up",
      # Input: load in data
      fileInput(inputId = "file",
                label = "Upload your shot data"),
    ),
    tabPanel("Shot map",
  
      sidebarLayout(
        
        # Sidebar panel for inputs ----
        sidebarPanel(
          
          # Input: Slider for the week(s) played ----
          sliderInput(inputId = "week",
                      label = "Week(s) played:",
                      min = 1,
                      max = 1,  # Initialize with a default value
                      value = c(1, 1),  # Initialize with a default value
                      step = 1),
          
          # Input: Outcome of shot ----
          selectInput(inputId = "outcome",
                      label = "Select Shot Outcome",
                      c("All")),
          
          # Input: Foot used for shot ----
          selectInput(inputId = "foot",
                      label = "Select which foot was used for shot",
                      c("Either")),
          
          # Input: Shot type ----
          selectInput(inputId = "type",
                      label = "Select what type the shot was",
                      c("All")),
          
          # Input: Shot first time ----
          selectInput(inputId = "first_time",
                      label = "Select whether the shot was taken first time or not",
                      c("Either")),
          
          # Input: Which team was I on ----
          selectInput(inputId = "team",
                      label = "Select which team I played on that week",
                      c("Either")),
          
          # Input: Team result ----
          selectInput(inputId = "result",
                      label = "Select my team's result",
                      c("Any")),
          
          # Input: Slider for the number of players aside ----
          sliderInput(inputId = "aside",
                      label = "Players aside:",
                      min = 1,
                      max = 1,
                      value = c(1, 1),
                      step = 1),
          
          # Checbox: if checked, then blocked shots are excluded from plot
          checkboxInput(inputId = "excludeBlocked",
                        label = "Exclude Blocked Shots",
                        value = TRUE),
          
          # Button that resets all inputs to their default
          actionButton("resetButton", "Clear selections")
        ),
        
        # Main panel for displaying outputs ----
        mainPanel(
          
          # Output: Shot Map ----
          plotlyOutput(outputId = "shotPlot"),
          
          #Output: Datatable for shots stats ----
          dataTableOutput("shots_table")
          
        )
      )
    ),
    tabPanel("Breakdown of shots",
             mainPanel(
               fluidRow(
                 column(width = 6,
                        #Output: Breakdown of shots based on result ----
                        tags$h2("Stats based on result"),
                        selectInput(inputId = "result_for_calculations",
                                    label = "Select my team's result",
                                    c("Any")),
                        div(class = "output-wrapper",
                            h4("Goals per game:"),
                            div(textOutput("goals_per_game_based_on_result"))),
                        div(class = "output-wrapper",
                            h4("Conversion rate:"),
                            div(textOutput("goals_per_shot_based_on_result"))),
                        h4("Conversion rate with first time"),
                        dataTableOutput("goals_by_first_time_shots_based_on_result"),
                        h4("Conversion rate by foot"),
                        dataTableOutput("goals_by_foot_based_on_result"),
                        h4("Conversion rate by type of shot"),
                        dataTableOutput("goals_by_shot_type_based_on_result")
                 ),
                 column(width = 6,
                        #Output: Breakdown of shots based on how many aside ----
                        tags$h2("Stats based on how many aside"),
                        selectizeInput(inputId = "aside_for_calculations",
                                       label = "Select how many players there were aside",
                                       c("Any"),
                                       selected = "Any",
                                       multiple = TRUE),
                        div(class = "output-wrapper",
                            h4("Goals per game:"),
                            div(textOutput("goals_per_game_based_on_aside"))),
                        div(class = "output-wrapper",
                            h4("Conversion rate:"),
                            div(textOutput("goals_per_shot_based_on_aside"))),
                        h4("Conversion rate with first time"),
                        dataTableOutput("goals_by_first_time_shots_based_on_aside"),
                        h4("Conversion rate by foot"),
                        dataTableOutput("goals_by_foot_based_on_aside"),
                        h4("Conversion rate by type of shot"),
                        dataTableOutput("goals_by_shot_type_based_on_aside")
                 )
               )
             )
    ),
    tabPanel("Weekly stats",
      mainPanel(
          #Output: Datatable for week by week stats ----
          dataTableOutput("stats_table")
      )
    ),
    tabPanel("Heatmap",
      plotlyOutput(outputId = "heatmap")
    )
  )
)

# Define server logic required for the Shiny app ----
server <- function(input, output, session) {
  
  #### Creating pitch ----
  stadiumlength <- 60
  stadiumwidth <- 40
  linewidth <- .12
  goalboxlength <- 16.5
  goalboxpos <- (stadiumwidth-goalboxlength*2-13)/2 ###to change goal width
  smallboxlength <- 5.5
  smallboxpos <- goalboxpos+goalboxlength-smallboxlength
  crossbarl <- 4
  crossbarh <- 2.44
  goalpos <- goalboxpos+goalboxlength
  attdefzone <- 30
  channel <- 4
  channelsplit <- 25
  
  ##Define the circle function that we will be using to create the center cirlce as well as the 18 yard box circles
  circle_fun <- function(center=c(0,0), diameter=1, npoints=1000, start=0, end=2){
    tt <- seq(start*pi, end*pi, length.out=npoints)
    data.frame(
      x = center[1] + diameter / 2 * cos(tt),
      y = center[2] + diameter / 2 * sin(tt)
    )
  }
  
  ##everything we build on one side of the pitch should be mirrored on the other side of the pitch
  ##this assumes that our pitch diagram goes down -> up
  mirror <- function(x) stadiumlength-x
  
  ## To use ggplot2, we need to define all the points that will go into the shape of the field
  ## The four parameters are: x (width values), y (length values), group (for the two sides), desc (a description for ease of use and further customization)
  segment_coord <- function(x, y, group, desc){
    segment_df <- data.frame(x = x, y = y) 
    segment_df$group <- group
    segment_df$side <- 1
    group <- group + 1
    
    # The same thing for the opposite side
    segment_df2 <- data.frame(x = x, y = mirror(y))
    segment_df2$group <- group
    segment_df2$side <- 2
    group <<- group + 1
    
    # On reunit les donnees
    segment_df <- rbind(segment_df, segment_df2)
    segment_df$desc <- desc
    
    return(segment_df)
  }
  
  ####this function will rotate the pitch if you want to see the field horizontally 
  rotate_pitch <- function(pitch, theta=pi/2){
    pitch_r <- pitch
    pitch_r$x <- pitch_r$x / 180 * pi
    pitch_r$y <- pitch_r$y / 180 * pi
    matrix_r <- matrix(c(cos(theta), sin(theta), -sin(theta), cos(theta)), ncol = 2)
    coords_r <- apply(pitch_r[,c("x","y")], 1, function(x) x %*% matrix_r)
    pitch_r$x <- coords_r[1,] ; pitch_r$y <- coords_r[2,]
    pitch_r$x <- pitch_r$x * 180 / pi
    pitch_r$y <- pitch_r$y * 180 / pi
    return(pitch_r)
  }
  
  
  ##Here we define the circles we need for our field. Our field lines have width of 12cm.
  #Center Circle -- at midpoint of the halfway line, with radius of 9.15m (10 yards)
  centercircle_outer <- circle_fun(center=c(stadiumwidth/2,stadiumlength/2),diameter = 5 * 2)
  centercircle_inner <- circle_fun(center=c(stadiumwidth/2,stadiumlength/2),diameter = (5-linewidth) * 2)
  
  #Penalty Arc -- arc from penalty spot (11 meters, 12 yards) with radius of 9.15 m (10 yards) ####diameter on both to change size
  penaltyarc_outer <- circle_fun(center=c(stadiumwidth/2,0),diameter = 10 * 2)
  penaltyarc_inner <- circle_fun(center=c(stadiumwidth/2,0),diameter = (10-linewidth) * 2)
  
  #corner arcs
  cornerarc_outer_r <- circle_fun(center = c(stadiumwidth,0),diameter = 1*2)
  cornerarc_inner_r <- circle_fun(center = c(stadiumwidth,0),diameter = (1-linewidth)*2)
  
  cornerarc_outer_l <- circle_fun(center = c(0,0),diameter = 1*2)
  cornerarc_inner_l <- circle_fun(center = c(0,0),diameter = (1-linewidth)*2)
  
  #penalty spot
  penaltyspot <- circle_fun(center=c(stadiumwidth/2,7),diameter=.5*2) #####second value in center function to change position
  
  
  ##Now, we generate our dataframe that contains the points for all of our field markings
  group <- 1
  
  pitch <- segment_coord(x=c(0-linewidth,0-linewidth,stadiumwidth+linewidth,stadiumwidth+linewidth)
                         ,y=c(0-linewidth,0,0,0-linewidth),group=group,desc = "goal line") 
  
  pitch <- rbind(pitch,segment_coord(x=c(0-linewidth,0-linewidth,0,0)
                                     ,y=c(0,stadiumlength/2-linewidth/2,stadiumlength/2-linewidth/2,0),group=group,desc = "left touch line"))
  
  pitch <- rbind(pitch,segment_coord(x=c(stadiumwidth,stadiumwidth,stadiumwidth+linewidth,stadiumwidth+linewidth)
                                     ,y=c(0,stadiumlength/2-linewidth/2,stadiumlength/2-linewidth/2,0),group=group,desc = "right touch line"))
  
  pitch <- rbind(pitch, segment_coord(x=c(goalpos-linewidth,goalpos-linewidth,goalpos,goalpos)
                                      ,y=c(0-crossbarh,0,0,0-crossbarh),group=group,desc = "left goal post"))
  
  pitch <- rbind(pitch, segment_coord(x=c(stadiumwidth-goalpos-linewidth,stadiumwidth-goalpos-linewidth,stadiumwidth-goalpos,stadiumwidth-goalpos)
                                      ,y=c(0-crossbarh,0,0,0-crossbarh),group=group,desc = "right goal post"))
  
  pitch <- rbind(pitch, segment_coord(x=c(goalpos-linewidth,goalpos-linewidth,stadiumwidth-goalpos,stadiumwidth-goalpos)
                                      ,y=c(0-crossbarh,0-crossbarh,0-crossbarh,0-crossbarh),group=group,desc = "crossbar"))
  
  pitch <- rbind(pitch, segment_coord(x=penaltyspot[,"x"]
                                      ,y=penaltyspot[,"y"],group=group,desc = "penalty spot"))
  
  pitch <- rbind(pitch, segment_coord(x=c(centercircle_outer[centercircle_outer$y<=stadiumlength/2,"x"],rev(centercircle_inner[centercircle_inner$y<=stadiumlength/2,"x"]))
                                      ,y=c(centercircle_outer[centercircle_outer$y<=stadiumlength/2,"y"],rev(centercircle_inner[centercircle_inner$y<=stadiumlength/2,"y"])),group=group,desc = "center circle"))
  
  pitch <- rbind(pitch, segment_coord(x=c(0-linewidth,0-linewidth,stadiumwidth+linewidth,stadiumwidth+linewidth)
                                      ,y=c(stadiumlength/2-linewidth/2,stadiumlength/2+linewidth/2,stadiumlength/2+linewidth/2,stadiumlength/2-linewidth/2),group=group,desc = "halfway line"))
  
  pitch <- rbind(pitch, segment_coord(x=c(penaltyarc_outer[penaltyarc_outer$y>=linewidth,"x"],rev(penaltyarc_inner[penaltyarc_inner$y>=linewidth,"x"]))
                                      ,y=c(penaltyarc_outer[penaltyarc_outer$y>=linewidth,"y"],rev(penaltyarc_inner[penaltyarc_inner$y>=linewidth,"y"])),group=group,desc = "penalty arc"))
  
  pitch <- rbind(pitch, segment_coord(x=c(cornerarc_outer_l[cornerarc_outer_l$x>=0 & cornerarc_outer_l$y>=0,"x"],rev(cornerarc_inner_l[cornerarc_inner_l$x>=0 & cornerarc_inner_l$y>=0,"x"]))
                                      ,y=c(cornerarc_outer_l[cornerarc_outer_l$x>=0 & cornerarc_outer_l$y>=0,"y"],rev(cornerarc_inner_l[cornerarc_inner_l$x>=0 & cornerarc_inner_l$y>=0,"y"])),group=group,desc = "left corner"))
  
  pitch <- rbind(pitch, segment_coord(x=c(cornerarc_outer_r[cornerarc_outer_r$x>=0&cornerarc_outer_r$x<=stadiumwidth & cornerarc_outer_r$y>=0,"x"],rev(cornerarc_inner_r[cornerarc_inner_r$x>=0&cornerarc_inner_r$x<=stadiumwidth& cornerarc_inner_r$y>=0,"x"]))
                                      ,y=c(cornerarc_outer_r[cornerarc_outer_r$x>=0&cornerarc_outer_r$x<=stadiumwidth & cornerarc_outer_r$y>=0,"y"],rev(cornerarc_inner_r[cornerarc_inner_r$x>=0&cornerarc_inner_r$x<=stadiumwidth & cornerarc_inner_r$y>=0,"y"])),group=group,desc = "right corner"))
  
  
  #Rotated Pitch
  horipitch <- rotate_pitch(pitch, theta = pi/2)
  horipitch2 <- horipitch
  horipitch2$y <- horipitch2$y * -1
  
  hori5 <- ggplot()+ geom_polygon(data = horipitch2[horipitch2$group %in% seq(1:36),], aes(x = x, y = y, group = group), col = "#0D0D0D") +
    coord_equal() +
    scale_x_continuous(breaks = NULL) +
    scale_y_continuous(breaks = NULL) +
    xlab("") + ylab("") +
    theme(axis.text.x = element_blank(),
          axis.text.y = element_blank(), 
          axis.ticks.x = element_blank(),
          axis.ticks.y = element_blank(), axis.title = element_blank(),
          panel.background = element_rect(fill = "#FFFFFFB3",
                                          colour = "#FFFFFFB3")
    )
  
  #### Functions ----
  ### Function to create conversion rate with first time shots
  calculate_conversion_rate_by_first_time <- function(shot_data, goal_data) {
    # Summarise shots by 'First time'
    shots_by_first_time <- shot_data %>%
      group_by(`First time`) %>%
      summarise(Shots = n())
    
    # Summarise goals by 'First time'
    goals_by_first_time <- goal_data %>%
      group_by(`First time`) %>%
      summarise(Goals = n())
    
    # Join the summarised data
    conversion_rate_by_first_time <- left_join(shots_by_first_time, goals_by_first_time, by = "First time")
    
    # Replace NA values with 0 and calculate Goals per shot
    conversion_rate_by_first_time <- conversion_rate_by_first_time %>%
      select(`First time`, Goals, Shots) %>%
      replace(is.na(.), 0) %>%
      mutate(`Conversion rate` = percent(Goals / Shots))
    
    return(conversion_rate_by_first_time)
  }
  
  
  ### Function to create conversion rate by foot
  calculate_conversion_rate_by_foot <- function(shot_data, goal_data) {
    # Summarise shots by 'Foot'
    shots_by_foot <- shot_data %>%
      group_by(Foot) %>%
      summarise(Shots = n())
    
    # Summarise goals by 'Foot'
    goals_by_foot <- goal_data %>%
      group_by(Foot) %>%
      summarise(Goals = n())  
  
    # Join the summarised data
    conversion_rate_by_foot <- left_join(shots_by_foot, goals_by_foot, by = "Foot")
    
    # Replace NA values with 0 and calculate Goals per shot
    conversion_rate_by_foot <- conversion_rate_by_foot %>%
      select(Foot, Goals, Shots) %>%
      replace(is.na(.), 0) %>%
      mutate(`Conversion rate` = percent(Goals / Shots))
    
    return(conversion_rate_by_foot)  
  }
  
  
  ### Function to create conversion rate by type of shot
  calculate_conversion_rate_by_type_of_shot <- function(shot_data, goal_data) {
    # Summarise shots by 'Foot'
    shots_by_type <- shot_data %>%
      group_by(Type) %>%
      summarise(Shots = n())
    
    # Summarise goals by 'Foot'
    goals_by_type <- goal_data %>%
      group_by(Type) %>%
      summarise(Goals = n())  
    
    # Join the summarised data
    conversion_rate_by_type_of_shot <- left_join(shots_by_type, goals_by_type, by = "Type")
    
    # Replace NA values with 0 and calculate Goals per shot
    conversion_rate_by_type_of_shot <- conversion_rate_by_type_of_shot %>%
      select(Type, Goals, Shots) %>%
      replace(is.na(.), 0) %>%
      mutate(`Conversion rate` = percent(Goals / Shots))
    
    return(conversion_rate_by_type_of_shot)  
  }
  
  ### Function to create circles and arcs for the heatmap
  circle_function_heatmap <- function(center=c(0,0), diameter=20, npoints=1000, start=0, end=2, rotation_angle = 0){
    tt <- seq(start*pi, end*pi, length.out=npoints)
    circle_data <- data.frame(
      x = center[1] + diameter / 2 * cos(tt),
      y = center[2] + diameter / 2 * sin(tt)
    )
    rotated_x <- circle_data$x * cos(rotation_angle) - circle_data$y * sin(rotation_angle)
    rotated_y <- circle_data$x * sin(rotation_angle) + circle_data$y * cos(rotation_angle)
    data.frame(
      x = rotated_x,
      y = rotated_y
    )
  }

  
  #### First tab ----
  filtered_data <- reactive({
    req(input$file)
    
    shot_data <- read_excel(input$file$datapath, sheet = 1)
    shot_data <- shot_data %>% separate(Location, into = c("x_shot_location", "y_shot_location"), sep = ", ", convert = T) %>%
      separate("End location", into = c("x_end_location", "y_end_location"), sep = ", ", convert = T)
    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')
    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',
                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))
    
    match_stats <- read_excel(input$file$datapath, sheet = 2)
    shot_data <- shot_data %>% inner_join(match_stats, by = "Week")
    filtered_data <- shot_data
    
    if (input$excludeBlocked) {
      filtered_data <- filtered_data %>% filter(Outcome != "Blocked")
    }
    
    selected_weeks <- input$week[1]:input$week[2]
    filtered_data <- filtered_data[filtered_data$Week %in% selected_weeks, ]
    
    if (input$outcome != "All") {
      filtered_data <- filtered_data[filtered_data$Outcome_filter == input$outcome, ]
    }
    
    if (input$foot != "Either") {
      filtered_data <- filtered_data[filtered_data$Foot == input$foot, ]
    }
    
    if (input$type != "All") {
      filtered_data <- filtered_data[filtered_data$Type == input$type, ]
    }

    if (input$first_time != "Either") {
      filtered_data <- filtered_data[filtered_data$`First time` == input$first_time, ]
    }

    if (input$team != "Either") {
      filtered_data <- filtered_data[filtered_data$Team == input$team, ]
    }

    if (input$result != "Any") {
      filtered_data <- filtered_data[filtered_data$`Team result` == input$result, ]
    }

    aside <- input$aside[1]:input$aside[2]
    filtered_data <- filtered_data[filtered_data$`How many aside` %in% aside, ]
    
    return(filtered_data)
  })
  
  # Updating ui (e.g. sliders & select input values)
  observe({
    req(input$file)
    
    shot_data <- read_excel(input$file$datapath, sheet = 1)
    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')
    match_stats <- read_excel(input$file$datapath, sheet = 2)
    shot_data <- shot_data %>% inner_join(match_stats, by = "Week")
    
    updateSliderInput(session, "week", max = max(shot_data$Week), value = c(1, length(unique(shot_data$Week))))
    updateSelectInput(session, "outcome", choices = c("All", unique(shot_data$Outcome_filter)))
    updateSelectInput(session, "foot", choices = c("Either", unique(shot_data$Foot)))
    updateSelectInput(session, "type", choices = c("All", unique(shot_data$Type)))
    updateSelectInput(session, "first_time", choices = c("Either", unique(shot_data$`First time`)))
    updateSelectInput(session, "team", choices = c("Either", unique(shot_data$Team)))
    updateSelectInput(session, "result", choices = c("Any", unique(shot_data$`Team result`)))
    updateSliderInput(session, "aside", min = min(shot_data$`How many aside`), max = max(shot_data$`How many aside`), value = c(min(shot_data$`How many aside`), max(shot_data$`How many aside`)))
  })
  
  # Define a function to reset inputs to default values
  resetInputs <- function() {
    observe({
      req(input$file)
      
      shot_data <- read_excel(input$file$datapath, sheet = 1)
      shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')
      match_stats <- read_excel(input$file$datapath, sheet = 2)
      shot_data <- shot_data %>% inner_join(match_stats, by = "Week")
      
      updateSliderInput(session, "week", value = c(1, length(unique(shot_data$Week))))
      updateSelectInput(session, "outcome", selected = "All")
      updateSelectInput(session, "foot", selected = "Either")
      updateSelectInput(session, "type", selected = "All")
      updateSelectInput(session, "first_time", selected = "Either")
      updateSelectInput(session, "team", selected = "Either")
      updateSelectInput(session, "result", selected = "Any")
      updateSliderInput(session, "aside", value = c(min(shot_data$`How many aside`), max(shot_data$`How many aside`)))
      updateCheckboxInput(session, "excludeBlocked", value = TRUE)
    })
  }
  
  # Create an observe event for the reset button
  observeEvent(input$resetButton, {
    resetInputs()
  })
  
  # Create a reactive table for shot data
  output$shots_table <- renderDataTable({
    shot_data <- filtered_data()
    
    if (is.null(shot_data)) {
      return(NULL)
    }
    
    shot_data %>% select(-c(x_shot_location, y_shot_location, x_end_location, y_end_location, Outcome_filter, Outcome_colour))
  }, options = list(lengthMenu = c(10, 25, 50), pageLength = 50))
    
  output$shotPlot <- renderPlotly({
    shot_data <- filtered_data()
    
    if (is.null(shot_data)) {
      return(NULL)
    }
    
    shot_data$WrappedDescription <- str_wrap(shot_data$Description, width = 40)
    
    shot_plot <- hori5 +
      geom_point(data = shot_data, aes(x = x_shot_location, y = y_shot_location, color = Outcome_colour,
                                       text = paste("Week:", Week, "\nFoot used:", Foot, "\nType of shot:", Type, "\nDescription:", WrappedDescription)), size = 3) +
      geom_segment(data = shot_data, aes(xend = x_end_location, yend = y_end_location, x = x_shot_location, y = y_shot_location, color = Outcome_colour),
                   arrow = arrow(type = "closed", length = unit(0.2, "inches")), lineend = "round", size = 0.2) +
      guides(color = "none") +
      scale_color_manual(values = c('No goal' = "#FF0000", Goal = "#008B45"))
    
    ggplotly(shot_plot, tooltip = "text")
  })
  
  #### Tables and numbers in second tab ----
  ### Updating ui (e.g. sliders & select input values)
  observe({
    req(input$file)
    
    shot_data <- read_excel(input$file$datapath, sheet = 1)
    shot_data <- shot_data %>% separate(Location, into = c("x_shot_location", "y_shot_location"), sep = ", ", convert = T) %>%
      separate("End location", into = c("x_end_location", "y_end_location"), sep = ", ", convert = T)
    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')
    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',
                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))
    match_stats <- read_excel(input$file$datapath, sheet = 2)
    shot_data <- shot_data %>% inner_join(match_stats, by = "Week")
    how_many_aside_sorted <- sort(unique(match_stats$`How many aside`))
    
    updateSelectInput(session, "aside_for_calculations", choices = c("Any", how_many_aside_sorted), selected = "Any")
    updateSelectInput(session, "result_for_calculations", choices = c("Any", unique(match_stats$`Team result`)))
  })
  
  ### Based on teams result
  ## For filters using match stats
  match_stats_calculations <- reactive({
    req(input$file)
    match_stats <- read_excel(input$file$datapath, sheet = 2)
    req(input$result_for_calculations)
    if (input$result_for_calculations != "Any") {
      filtered_stats <- match_stats[match_stats$`Team result` == input$result_for_calculations, ]
      return(filtered_stats)
    } else {
      return(match_stats)
    }
  })
  
  # Goals per game
  output$goals_per_game_based_on_result <- renderText({
    filtered_data <- match_stats_calculations()
    games <- nrow(filtered_data)
    if (games > 0) {
      goals <- sum(filtered_data$Goals)
      goals_per_game <- goals / games
      return(round(goals_per_game, 2))
    } else {
      return("No data available")
    }
  })
  
  # Conversion rate
  output$goals_per_shot_based_on_result <- renderText({
    filtered_data <- match_stats_calculations()
    games <- nrow(filtered_data)
    if (games > 0) {
      goals <- sum(filtered_data$Goals)
      shots <- sum(filtered_data$Shots)
      goals_per_shot <- goals / shots
      return(percent(goals_per_shot))
    } else {
      return("No data available")
    }
  })
  
  ## For filters using shot and goal stats
  # Shot stats
  shot_stats_calculations <- reactive({
    req(input$file)
    shot_data <- read_excel(input$file$datapath, sheet = 1)
    shot_data <- shot_data %>% separate(Location, into = c("x_shot_location", "y_shot_location"), sep = ", ", convert = T) %>%
      separate("End location", into = c("x_end_location", "y_end_location"), sep = ", ", convert = T)
    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')
    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',
                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))
    match_stats <- read_excel(input$file$datapath, sheet = 2)
    shot_data <- shot_data %>% inner_join(match_stats, by = "Week")
    req(input$result_for_calculations)
    if (input$result_for_calculations != "Any") {
      filtered_shot_stats <- shot_data[shot_data$`Team result` == input$result_for_calculations, ]
      return(filtered_shot_stats)
    } else {
      return(shot_data)
    }
  })
  
  # Goal stats
  goal_stats_calculations <- reactive({
    req(input$file)
    shot_data <- read_excel(input$file$datapath, sheet = 1)
    shot_data <- shot_data %>% separate(Location, into = c("x_shot_location", "y_shot_location"), sep = ", ", convert = T) %>%
      separate("End location", into = c("x_end_location", "y_end_location"), sep = ", ", convert = T)
    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')
    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',
                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))
    match_stats <- read_excel(input$file$datapath, sheet = 2)
    shot_data <- shot_data %>% inner_join(match_stats, by = "Week")
    goal_data <- shot_data %>% filter(Outcome == "Goal")
    req(input$result_for_calculations)
    if (input$result_for_calculations != "Any") {
      filtered_goal_stats <- goal_data[goal_data$`Team result` == input$result_for_calculations, ]
      return(filtered_goal_stats)
    } else {
      return(goal_data)
    }
  })
  
  # Conversion rate of first time shots
  output$goals_by_first_time_shots_based_on_result <- renderDataTable({
    filtered_shot_data <- shot_stats_calculations()
    filtered_goal_data <- goal_stats_calculations()
    goals <- nrow(filtered_goal_data)
    if (goals > 0) {
      conversion_rate_by_first_time <- calculate_conversion_rate_by_first_time(filtered_shot_data, filtered_goal_data)
      return(conversion_rate_by_first_time)
    } else {
      return("No data available")
    }
  }, options = list(
    searching = FALSE, # Disable search
    paging = FALSE,    # Disable pagination
    lengthMenu = list(c(-1), c("All")),  # Show all entries
    dom = 't' # Don't show any additional information
  ))
  
  # Conversion rate by foot
  output$goals_by_foot_based_on_result <- renderDataTable({
    filtered_shot_data <- shot_stats_calculations()
    filtered_goal_data <- goal_stats_calculations()
    goals <- nrow(filtered_goal_data)
    if (goals > 0) {
      conversion_rate_by_foot <- calculate_conversion_rate_by_foot(filtered_shot_data, filtered_goal_data)
      return(conversion_rate_by_foot)
    } else {
      return("No data available")
    }
  }, options = list(
    searching = FALSE, # Disable search
    paging = FALSE,    # Disable pagination
    lengthMenu = list(c(-1), c("All")),  # Show all entries
    dom = 't' # Don't show any additional information
  ))
  
  # Conversion rate by type of shot
  output$goals_by_shot_type_based_on_result <- renderDataTable({
    filtered_shot_data <- shot_stats_calculations()
    filtered_goal_data <- goal_stats_calculations()
    goals <- nrow(filtered_goal_data)
    if (goals > 0) {
      conversion_rate_by_type_of_shot <- calculate_conversion_rate_by_type_of_shot(filtered_shot_data, filtered_goal_data)
      return(conversion_rate_by_type_of_shot)
    } else {
      return("No data available")
    }
  }, options = list(
    searching = FALSE, # Disable search
    paging = FALSE,    # Disable pagination
    lengthMenu = list(c(-1), c("All")),  # Show all entries
    dom = 't' # Don't show any additional information
  ))
  
  
  ### Based on how many aside
  ## For filters using match stats
  match_stats_calculations_aside <- reactive({
    req(input$file)
    match_stats <- read_excel(input$file$datapath, sheet = 2)
    req(input$aside_for_calculations)
    if (input$aside_for_calculations != "Any") {
      filtered_stats_aside <- match_stats[match_stats$`How many aside` %in% input$aside_for_calculations, ]
    } else {
      filtered_stats_aside <- match_stats
    }
    return(filtered_stats_aside)
  })
  
  # Goals per game
  output$goals_per_game_based_on_aside <- renderText({
    filtered_data_aside <- match_stats_calculations_aside()
    games <- nrow(filtered_data_aside)
    if (games > 0) {
      goals <- sum(filtered_data_aside$Goals)
      goals_per_game <- goals / games
      return(round(goals_per_game, 2))
    } else {
      return("No data available")
    }
  })
  
  # Conversion rate
  output$goals_per_shot_based_on_aside <- renderText({
    filtered_data_aside <- match_stats_calculations_aside()
    games <- nrow(filtered_data_aside)
    if (games > 0) {
      goals <- sum(filtered_data_aside$Goals)
      shots <- sum(filtered_data_aside$Shots)
      goals_per_shot <- goals / shots
      return(percent(goals_per_shot))
    } else {
      return("No data available")
    }
  })
  
  ## For filters using shot and goal stats
  # Shot stats
  shot_stats_calculations_aside <- reactive({
    req(input$file)
    shot_data <- read_excel(input$file$datapath, sheet = 1)
    shot_data <- shot_data %>% separate(Location, into = c("x_shot_location", "y_shot_location"), sep = ", ", convert = T) %>%
      separate("End location", into = c("x_end_location", "y_end_location"), sep = ", ", convert = T)
    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')
    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',
                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))
    match_stats <- read_excel(input$file$datapath, sheet = 2)
    shot_data <- shot_data %>% inner_join(match_stats, by = "Week")
    req(input$aside_for_calculations)
    if (input$aside_for_calculations != "Any") {
      filtered_shot_stats_aside <- shot_data[shot_data$`How many aside` %in% input$aside_for_calculations, ]
      return(filtered_shot_stats_aside)
    } else {
      return(shot_data)
    }
  })
  
  # Goal stats
  goal_stats_calculations_aside <- reactive({
    req(input$file)
    shot_data <- read_excel(input$file$datapath, sheet = 1)
    shot_data <- shot_data %>% separate(Location, into = c("x_shot_location", "y_shot_location"), sep = ", ", convert = T) %>%
      separate("End location", into = c("x_end_location", "y_end_location"), sep = ", ", convert = T)
    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')
    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',
                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))
    match_stats <- read_excel(input$file$datapath, sheet = 2)
    shot_data <- shot_data %>% inner_join(match_stats, by = "Week")
    goal_data <- shot_data %>% filter(Outcome == "Goal")
    req(input$aside_for_calculations)
    if (input$aside_for_calculations != "Any") {
      filtered_goal_stats_aside <- goal_data[goal_data$`How many aside` %in% input$aside_for_calculations, ]
      return(filtered_goal_stats_aside)
    } else {
      return(goal_data)
    }
  })
  
  # Conversion rate of first time shots
  output$goals_by_first_time_shots_based_on_aside <- renderDataTable({
    filtered_shot_data_aside <- shot_stats_calculations_aside()
    filtered_goal_data_aside <- goal_stats_calculations_aside()
    goals <- nrow(filtered_goal_data_aside)
    if (goals > 0) {
      conversion_rate_by_first_time_aside <- calculate_conversion_rate_by_first_time(filtered_shot_data_aside, filtered_goal_data_aside)
      return(conversion_rate_by_first_time_aside)
    } else {
      return("No data available")
    }
  }, options = list(
    searching = FALSE, # Disable search
    paging = FALSE,    # Disable pagination
    lengthMenu = list(c(-1), c("All")),  # Show all entries
    dom = 't' # Don't show any additional information
  ))
  
  # Conversion rate by foot
  output$goals_by_foot_based_on_aside <- renderDataTable({
    filtered_shot_data_aside <- shot_stats_calculations_aside()
    filtered_goal_data_aside <- goal_stats_calculations_aside()
    goals <- nrow(filtered_goal_data_aside)
    if (goals > 0) {
      conversion_rate_by_foot_aside <- calculate_conversion_rate_by_foot(filtered_shot_data_aside, filtered_goal_data_aside)
      return(conversion_rate_by_foot_aside)
    } else {
      return("No data available")
    }
  }, options = list(
    searching = FALSE, # Disable search
    paging = FALSE,    # Disable pagination
    lengthMenu = list(c(-1), c("All")),  # Show all entries
    dom = 't' # Don't show any additional information
  ))
  
  # Conversion rate by type of shot
  output$goals_by_shot_type_based_on_aside <- renderDataTable({
    filtered_shot_data_aside <- shot_stats_calculations_aside()
    filtered_goal_data_aside <- goal_stats_calculations_aside()
    goals <- nrow(filtered_goal_data_aside)
    if (goals > 0) {
      conversion_rate_by_type_of_shot_aside <- calculate_conversion_rate_by_type_of_shot(filtered_shot_data_aside, filtered_goal_data_aside)
      return(conversion_rate_by_type_of_shot_aside)
    } else {
      return("No data available")
    }
  }, options = list(
    searching = FALSE, # Disable search
    paging = FALSE,    # Disable pagination
    lengthMenu = list(c(-1), c("All")),  # Show all entries
    dom = 't' # Don't show any additional information
  ))
  
  
  #### Table with full weekly stats ----
  weekly_stats <- reactive({
    req(input$file)
    
    match_stats <- read_excel(input$file$datapath, sheet = 2)
    
    return(match_stats)
  })
  
  output$stats_table <- renderDataTable(
    weekly_stats(),
    options = list(lengthMenu = c(10, 25, 50), pageLength = 10)
  )
  
  #### Heatmap ----
  heatmap_data <- reactive({
    req(input$file)
    
    shot_heatmap_data <- read_excel(input$file$datapath, sheet = 1) %>%
      select("Outcome", "Location") %>%
      separate(Location, into = c("x_shot_location", "y_shot_location"), sep = ", ", convert = T) %>%
      filter(Outcome != "Blocked")
    shot_heatmap_data$Outcome <- ifelse(shot_heatmap_data$Outcome == 'Goal', 1, 0)
    
    shot_heatmap_data <- shot_heatmap_data %>%
      mutate(y_shot_location = ifelse(y_shot_location >= 0 & y_shot_location <= 10, 5,
                                      ifelse(y_shot_location > 10 & y_shot_location <= 20, 15,
                                             ifelse(y_shot_location > 20 & y_shot_location <= 30, 25,
                                                    ifelse(y_shot_location > 30 & y_shot_location <= 40, 35, y_shot_location)))))
    
    shot_heatmap_data <- shot_heatmap_data %>%
      mutate(x_shot_location = ifelse(x_shot_location >= 0 & x_shot_location <= 10, 5,
                                      ifelse(x_shot_location > 10 & x_shot_location <= 20, 15,
                                             ifelse(x_shot_location > 20 & x_shot_location <= 30, 25,
                                                    ifelse(x_shot_location > 30 & x_shot_location <= 40, 35,
                                                           ifelse(x_shot_location > 40 & x_shot_location <= 50, 45,
                                                                  ifelse(x_shot_location > 50 & x_shot_location <= 60, 55, x_shot_location)))))))
    
    goals_heatmap <- shot_heatmap_data %>%
      group_by(x_shot_location, y_shot_location) %>%
      summarise(goals = sum(Outcome))
    
    shots_heatmap <- shot_heatmap_data %>%
      group_by(x_shot_location, y_shot_location) %>%
      summarise(shots = n())
    
    football_heatmap <- left_join(goals_heatmap, shots_heatmap, by = c("x_shot_location", "y_shot_location"))
    football_heatmap <- football_heatmap %>% mutate(`Conversion rate` = round((goals/shots)*100, 0))
    
    return(football_heatmap)
  })
  
  output$heatmap <- renderPlotly({
    football_heatmap <- heatmap_data()
    
    if (is.null(football_heatmap)) {
      return(NULL)
    }
    
    # create markings on football pitch
    football_pitch_lines <- data.frame(
      x = c(0, 30, 60, 0, 0),
      y = c(0, 0, 0, 0, 40),
      xend = c(0, 30, 60, 60, 60),
      yend = c(40, 40, 40, 0, 40)
    )
    center_circle <- circle_function_heatmap(center = c(30,20))
    penalty_arc_att <- circle_function_heatmap(center = c(20, -60), npoints = 1000, end = 1, rotation_angle = pi / 2)
    penalty_arc_def <- circle_function_heatmap(center = c(20, 0), npoints = 1000, end = 1, rotation_angle = pi / 2)
    penalty_arc_def$x <- -penalty_arc_def$x
    penalty_spot_att <- circle_function_heatmap(center = c(7,20), diameter = 0.2)
    penalty_spot_def <- circle_function_heatmap(center = c(53,20), diameter = 0.2)
    
    colfunc <- colorRampPalette(c("#BCE4D8", "#2C5985"))
    
    heatmap_with_pitch <- ggplot(football_heatmap, aes(x_shot_location, y_shot_location)) +
      geom_tile(aes(fill=`Conversion rate`, text = paste0("Conversion rate: ", `Conversion rate`, "%", "\nGoals: ", goals, "\nShots: ", shots)), size = 3) +
      scale_fill_gradientn(colors = colfunc(30)) +
      theme_classic() +
      theme(panel.background = element_rect(fill = 'black'),
            axis.line = element_blank(),
            axis.text = element_blank(),
            axis.ticks = element_blank(),
            axis.title = element_blank(),
            legend.position = "none") +
      geom_segment(data = football_pitch_lines, aes(x = x, y = y, xend = xend, yend = yend), color = "white", size = 1) +
      geom_point(data = center_circle, aes(x = x, y = y), color = "white", size = 0.2) +
      geom_point(data = penalty_arc_att, aes(x = x, y = y), color = "white", size = 0.2) +
      geom_point(data = penalty_arc_def, aes(x = x, y = y), color = "white", size = 0.2) +
      geom_point(data = penalty_spot_att, aes(x = x, y = y), color = "white", size = 0.6) +
      geom_point(data = penalty_spot_def, aes(x = x, y = y), color = "white", size = 0.6)
    
    plotly_heatmap <- ggplotly(heatmap_with_pitch, tooltip = "text") %>%
      layout(autosize = TRUE,  margin = list(autoexpand = TRUE), height = 700, width = 1200)
    
    return(plotly_heatmap)
    
  })
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```