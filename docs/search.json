[
  {
    "objectID": "shinylive-github-pages.html",
    "href": "shinylive-github-pages.html",
    "title": "shinylive-github-pages",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(plotly)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(openxlsx)\n\nui &lt;- fluidPage(\n  tags$style(\n    HTML(\"\n      .output-wrapper {\n        display: flex;\n        align-items: center;\n        margin-bottom: 10px;\n      }\n      h4 {\n        margin-right: 10px;\n      }\n    \")\n  ),\n  \n  titlePanel(\"Football stats app\"),\n  \n  tabsetPanel(\n    tabPanel(\"Set-up\",\n      # Input: load in data\n      fileInput(inputId = \"file\",\n                label = \"Upload your shot data\"),\n      # Downloading a sample file to be used in the app\n      downloadButton(\"download_sample_data\", \"Download sample data\")\n    ),\n    tabPanel(\"Shot map\",\n  \n      sidebarLayout(\n        \n        # Sidebar panel for inputs ----\n        sidebarPanel(\n          \n          # Input: Slider for the week(s) played ----\n          sliderInput(inputId = \"week\",\n                      label = \"Week(s) played:\",\n                      min = 1,\n                      max = 1,  # Initialize with a default value\n                      value = c(1, 1),  # Initialize with a default value\n                      step = 1),\n          \n          # Input: Outcome of shot ----\n          selectInput(inputId = \"outcome\",\n                      label = \"Select Shot Outcome\",\n                      c(\"All\")),\n          \n          # Input: Foot used for shot ----\n          selectInput(inputId = \"foot\",\n                      label = \"Select which foot was used for shot\",\n                      c(\"Either\")),\n          \n          # Input: Shot type ----\n          selectInput(inputId = \"type\",\n                      label = \"Select what type the shot was\",\n                      c(\"All\")),\n          \n          # Input: Shot first time ----\n          selectInput(inputId = \"first_time\",\n                      label = \"Select whether the shot was taken first time or not\",\n                      c(\"Either\")),\n          \n          # Input: Which team was I on ----\n          selectInput(inputId = \"team\",\n                      label = \"Select which team I played on that week\",\n                      c(\"Either\")),\n          \n          # Input: Team result ----\n          selectInput(inputId = \"result\",\n                      label = \"Select my team's result\",\n                      c(\"Any\")),\n          \n          # Input: Slider for the number of players aside ----\n          sliderInput(inputId = \"aside\",\n                      label = \"Players aside:\",\n                      min = 1,\n                      max = 1,\n                      value = c(1, 1),\n                      step = 1),\n          \n          # Button that resets all inputs to their default\n          actionButton(\"resetButton\", \"Clear selections\")\n        ),\n        \n        # Main panel for displaying outputs ----\n        mainPanel(\n          \n          # Output: Shot Map ----\n          plotlyOutput(outputId = \"shotPlot\"),\n          \n          #Output: Datatable for shots stats ----\n          dataTableOutput(\"shots_table\")\n          \n        )\n      )\n    ),\n    tabPanel(\"Breakdown of shots\",\n             mainPanel(\n               fluidRow(\n                 column(width = 6,\n                        #Output: Breakdown of shots based on result ----\n                        tags$h2(\"Stats based on result\"),\n                        selectInput(inputId = \"result_for_calculations\",\n                                    label = \"Select my team's result\",\n                                    c(\"Any\")),\n                        div(class = \"output-wrapper\",\n                            h4(\"Goals per game:\"),\n                            div(textOutput(\"goals_per_game_based_on_result\"))),\n                        div(class = \"output-wrapper\",\n                            h4(\"Conversion rate:\"),\n                            div(textOutput(\"goals_per_shot_based_on_result\"))),\n                        h4(\"Conversion rate with first time\"),\n                        dataTableOutput(\"goals_by_first_time_shots_based_on_result\"),\n                        h4(\"Conversion rate by foot\"),\n                        dataTableOutput(\"goals_by_foot_based_on_result\"),\n                        h4(\"Conversion rate by type of shot\"),\n                        dataTableOutput(\"goals_by_shot_type_based_on_result\")\n                 ),\n                 column(width = 6,\n                        #Output: Breakdown of shots based on how many aside ----\n                        tags$h2(\"Stats based on how many aside\"),\n                        pickerInput(inputId = \"aside_for_calculations\",\n                                    label = \"Select how many players there were aside\",\n                                    choices = c(\"Any\"),\n                                    selected = \"Any\",\n                                    multiple = TRUE,\n                                    options = pickerOptions(actionsBox = TRUE, selectedTextFormat = \"count\", liveSearch = T)),\n                        div(class = \"output-wrapper\",\n                            h4(\"Goals per game:\"),\n                            div(textOutput(\"goals_per_game_based_on_aside\"))),\n                        div(class = \"output-wrapper\",\n                            h4(\"Conversion rate:\"),\n                            div(textOutput(\"goals_per_shot_based_on_aside\"))),\n                        h4(\"Conversion rate with first time\"),\n                        dataTableOutput(\"goals_by_first_time_shots_based_on_aside\"),\n                        h4(\"Conversion rate by foot\"),\n                        dataTableOutput(\"goals_by_foot_based_on_aside\"),\n                        h4(\"Conversion rate by type of shot\"),\n                        dataTableOutput(\"goals_by_shot_type_based_on_aside\")\n                 )\n               )\n             )\n    ),\n    tabPanel(\"Weekly stats\",\n      mainPanel(\n          #Output: Datatable for week by week stats ----\n          dataTableOutput(\"stats_table\")\n      )\n    ),\n    tabPanel(\"Heatmap\",\n      plotlyOutput(outputId = \"heatmap\")\n    )\n  )\n)\n\n# Define server logic required for the Shiny app ----\nserver &lt;- function(input, output, session) {\n  \n  #### Creating pitch ----\n  stadiumlength &lt;- 60\n  stadiumwidth &lt;- 40\n  linewidth &lt;- .12\n  goalboxlength &lt;- 16.5\n  goalboxpos &lt;- (stadiumwidth-goalboxlength*2-13)/2 ###to change goal width\n  smallboxlength &lt;- 5.5\n  smallboxpos &lt;- goalboxpos+goalboxlength-smallboxlength\n  crossbarl &lt;- 4\n  crossbarh &lt;- 2.44\n  goalpos &lt;- goalboxpos+goalboxlength\n  attdefzone &lt;- 30\n  channel &lt;- 4\n  channelsplit &lt;- 25\n  \n  ##Define the circle function that we will be using to create the center cirlce as well as the 18 yard box circles\n  circle_fun &lt;- function(center=c(0,0), diameter=1, npoints=1000, start=0, end=2){\n    tt &lt;- seq(start*pi, end*pi, length.out=npoints)\n    data.frame(\n      x = center[1] + diameter / 2 * cos(tt),\n      y = center[2] + diameter / 2 * sin(tt)\n    )\n  }\n  \n  ##everything we build on one side of the pitch should be mirrored on the other side of the pitch\n  ##this assumes that our pitch diagram goes down -&gt; up\n  mirror &lt;- function(x) stadiumlength-x\n  \n  ## To use ggplot2, we need to define all the points that will go into the shape of the field\n  ## The four parameters are: x (width values), y (length values), group (for the two sides), desc (a description for ease of use and further customization)\n  segment_coord &lt;- function(x, y, group, desc){\n    segment_df &lt;- data.frame(x = x, y = y) \n    segment_df$group &lt;- group\n    segment_df$side &lt;- 1\n    group &lt;- group + 1\n    \n    # The same thing for the opposite side\n    segment_df2 &lt;- data.frame(x = x, y = mirror(y))\n    segment_df2$group &lt;- group\n    segment_df2$side &lt;- 2\n    group &lt;&lt;- group + 1\n    \n    # On reunit les donnees\n    segment_df &lt;- rbind(segment_df, segment_df2)\n    segment_df$desc &lt;- desc\n    \n    return(segment_df)\n  }\n  \n  ####this function will rotate the pitch if you want to see the field horizontally \n  rotate_pitch &lt;- function(pitch, theta=pi/2){\n    pitch_r &lt;- pitch\n    pitch_r$x &lt;- pitch_r$x / 180 * pi\n    pitch_r$y &lt;- pitch_r$y / 180 * pi\n    matrix_r &lt;- matrix(c(cos(theta), sin(theta), -sin(theta), cos(theta)), ncol = 2)\n    coords_r &lt;- apply(pitch_r[,c(\"x\",\"y\")], 1, function(x) x %*% matrix_r)\n    pitch_r$x &lt;- coords_r[1,] ; pitch_r$y &lt;- coords_r[2,]\n    pitch_r$x &lt;- pitch_r$x * 180 / pi\n    pitch_r$y &lt;- pitch_r$y * 180 / pi\n    return(pitch_r)\n  }\n  \n  \n  ##Here we define the circles we need for our field. Our field lines have width of 12cm.\n  #Center Circle -- at midpoint of the halfway line, with radius of 9.15m (10 yards)\n  centercircle_outer &lt;- circle_fun(center=c(stadiumwidth/2,stadiumlength/2),diameter = 5 * 2)\n  centercircle_inner &lt;- circle_fun(center=c(stadiumwidth/2,stadiumlength/2),diameter = (5-linewidth) * 2)\n  \n  #Penalty Arc -- arc from penalty spot (11 meters, 12 yards) with radius of 9.15 m (10 yards) ####diameter on both to change size\n  penaltyarc_outer &lt;- circle_fun(center=c(stadiumwidth/2,0),diameter = 10 * 2)\n  penaltyarc_inner &lt;- circle_fun(center=c(stadiumwidth/2,0),diameter = (10-linewidth) * 2)\n  \n  #corner arcs\n  cornerarc_outer_r &lt;- circle_fun(center = c(stadiumwidth,0),diameter = 1*2)\n  cornerarc_inner_r &lt;- circle_fun(center = c(stadiumwidth,0),diameter = (1-linewidth)*2)\n  \n  cornerarc_outer_l &lt;- circle_fun(center = c(0,0),diameter = 1*2)\n  cornerarc_inner_l &lt;- circle_fun(center = c(0,0),diameter = (1-linewidth)*2)\n  \n  #penalty spot\n  penaltyspot &lt;- circle_fun(center=c(stadiumwidth/2,7),diameter=.5*2) #####second value in center function to change position\n  \n  \n  ##Now, we generate our dataframe that contains the points for all of our field markings\n  group &lt;- 1\n  \n  pitch &lt;- segment_coord(x=c(0-linewidth,0-linewidth,stadiumwidth+linewidth,stadiumwidth+linewidth)\n                         ,y=c(0-linewidth,0,0,0-linewidth),group=group,desc = \"goal line\") \n  \n  pitch &lt;- rbind(pitch,segment_coord(x=c(0-linewidth,0-linewidth,0,0)\n                                     ,y=c(0,stadiumlength/2-linewidth/2,stadiumlength/2-linewidth/2,0),group=group,desc = \"left touch line\"))\n  \n  pitch &lt;- rbind(pitch,segment_coord(x=c(stadiumwidth,stadiumwidth,stadiumwidth+linewidth,stadiumwidth+linewidth)\n                                     ,y=c(0,stadiumlength/2-linewidth/2,stadiumlength/2-linewidth/2,0),group=group,desc = \"right touch line\"))\n  \n  pitch &lt;- rbind(pitch, segment_coord(x=c(goalpos-linewidth,goalpos-linewidth,goalpos,goalpos)\n                                      ,y=c(0-crossbarh,0,0,0-crossbarh),group=group,desc = \"left goal post\"))\n  \n  pitch &lt;- rbind(pitch, segment_coord(x=c(stadiumwidth-goalpos-linewidth,stadiumwidth-goalpos-linewidth,stadiumwidth-goalpos,stadiumwidth-goalpos)\n                                      ,y=c(0-crossbarh,0,0,0-crossbarh),group=group,desc = \"right goal post\"))\n  \n  pitch &lt;- rbind(pitch, segment_coord(x=c(goalpos-linewidth,goalpos-linewidth,stadiumwidth-goalpos,stadiumwidth-goalpos)\n                                      ,y=c(0-crossbarh,0-crossbarh,0-crossbarh,0-crossbarh),group=group,desc = \"crossbar\"))\n  \n  pitch &lt;- rbind(pitch, segment_coord(x=penaltyspot[,\"x\"]\n                                      ,y=penaltyspot[,\"y\"],group=group,desc = \"penalty spot\"))\n  \n  pitch &lt;- rbind(pitch, segment_coord(x=c(centercircle_outer[centercircle_outer$y&lt;=stadiumlength/2,\"x\"],rev(centercircle_inner[centercircle_inner$y&lt;=stadiumlength/2,\"x\"]))\n                                      ,y=c(centercircle_outer[centercircle_outer$y&lt;=stadiumlength/2,\"y\"],rev(centercircle_inner[centercircle_inner$y&lt;=stadiumlength/2,\"y\"])),group=group,desc = \"center circle\"))\n  \n  pitch &lt;- rbind(pitch, segment_coord(x=c(0-linewidth,0-linewidth,stadiumwidth+linewidth,stadiumwidth+linewidth)\n                                      ,y=c(stadiumlength/2-linewidth/2,stadiumlength/2+linewidth/2,stadiumlength/2+linewidth/2,stadiumlength/2-linewidth/2),group=group,desc = \"halfway line\"))\n  \n  pitch &lt;- rbind(pitch, segment_coord(x=c(penaltyarc_outer[penaltyarc_outer$y&gt;=linewidth,\"x\"],rev(penaltyarc_inner[penaltyarc_inner$y&gt;=linewidth,\"x\"]))\n                                      ,y=c(penaltyarc_outer[penaltyarc_outer$y&gt;=linewidth,\"y\"],rev(penaltyarc_inner[penaltyarc_inner$y&gt;=linewidth,\"y\"])),group=group,desc = \"penalty arc\"))\n  \n  pitch &lt;- rbind(pitch, segment_coord(x=c(cornerarc_outer_l[cornerarc_outer_l$x&gt;=0 & cornerarc_outer_l$y&gt;=0,\"x\"],rev(cornerarc_inner_l[cornerarc_inner_l$x&gt;=0 & cornerarc_inner_l$y&gt;=0,\"x\"]))\n                                      ,y=c(cornerarc_outer_l[cornerarc_outer_l$x&gt;=0 & cornerarc_outer_l$y&gt;=0,\"y\"],rev(cornerarc_inner_l[cornerarc_inner_l$x&gt;=0 & cornerarc_inner_l$y&gt;=0,\"y\"])),group=group,desc = \"left corner\"))\n  \n  pitch &lt;- rbind(pitch, segment_coord(x=c(cornerarc_outer_r[cornerarc_outer_r$x&gt;=0&cornerarc_outer_r$x&lt;=stadiumwidth & cornerarc_outer_r$y&gt;=0,\"x\"],rev(cornerarc_inner_r[cornerarc_inner_r$x&gt;=0&cornerarc_inner_r$x&lt;=stadiumwidth& cornerarc_inner_r$y&gt;=0,\"x\"]))\n                                      ,y=c(cornerarc_outer_r[cornerarc_outer_r$x&gt;=0&cornerarc_outer_r$x&lt;=stadiumwidth & cornerarc_outer_r$y&gt;=0,\"y\"],rev(cornerarc_inner_r[cornerarc_inner_r$x&gt;=0&cornerarc_inner_r$x&lt;=stadiumwidth & cornerarc_inner_r$y&gt;=0,\"y\"])),group=group,desc = \"right corner\"))\n  \n  \n  #Rotated Pitch\n  horipitch &lt;- rotate_pitch(pitch, theta = pi/2)\n  horipitch2 &lt;- horipitch\n  horipitch2$y &lt;- horipitch2$y * -1\n  \n  hori5 &lt;- ggplot()+ geom_polygon(data = horipitch2[horipitch2$group %in% seq(1:36),], aes(x = x, y = y, group = group), col = \"#0D0D0D\") +\n    coord_equal() +\n    scale_x_continuous(breaks = NULL) +\n    scale_y_continuous(breaks = NULL) +\n    xlab(\"\") + ylab(\"\") +\n    theme(axis.text.x = element_blank(),\n          axis.text.y = element_blank(), \n          axis.ticks.x = element_blank(),\n          axis.ticks.y = element_blank(), axis.title = element_blank(),\n          panel.background = element_rect(fill = \"#FFFFFFB3\",\n                                          colour = \"#FFFFFFB3\")\n    )\n  \n  #### Functions ----\n  ### Function to create conversion rate with first time shots\n  calculate_conversion_rate_by_first_time &lt;- function(shot_data, goal_data) {\n    # Summarise shots by 'First time'\n    shots_by_first_time &lt;- shot_data %&gt;%\n      group_by(`First time`) %&gt;%\n      summarise(Shots = n())\n    \n    # Summarise goals by 'First time'\n    goals_by_first_time &lt;- goal_data %&gt;%\n      group_by(`First time`) %&gt;%\n      summarise(Goals = n())\n    \n    # Join the summarised data\n    conversion_rate_by_first_time &lt;- left_join(shots_by_first_time, goals_by_first_time, by = \"First time\")\n    \n    # Replace NA values with 0 and calculate Goals per shot\n    conversion_rate_by_first_time &lt;- conversion_rate_by_first_time %&gt;%\n      select(`First time`, Goals, Shots) %&gt;%\n      replace(is.na(.), 0) %&gt;%\n      mutate(`Conversion rate` = percent(Goals / Shots))\n    \n    return(conversion_rate_by_first_time)\n  }\n  \n  \n  ### Function to create conversion rate by foot\n  calculate_conversion_rate_by_foot &lt;- function(shot_data, goal_data) {\n    # Summarise shots by 'Foot'\n    shots_by_foot &lt;- shot_data %&gt;%\n      group_by(Foot) %&gt;%\n      summarise(Shots = n())\n    \n    # Summarise goals by 'Foot'\n    goals_by_foot &lt;- goal_data %&gt;%\n      group_by(Foot) %&gt;%\n      summarise(Goals = n())  \n  \n    # Join the summarised data\n    conversion_rate_by_foot &lt;- left_join(shots_by_foot, goals_by_foot, by = \"Foot\")\n    \n    # Replace NA values with 0 and calculate Goals per shot\n    conversion_rate_by_foot &lt;- conversion_rate_by_foot %&gt;%\n      select(Foot, Goals, Shots) %&gt;%\n      replace(is.na(.), 0) %&gt;%\n      mutate(`Conversion rate` = percent(Goals / Shots))\n    \n    return(conversion_rate_by_foot)  \n  }\n  \n  \n  ### Function to create conversion rate by type of shot\n  calculate_conversion_rate_by_type_of_shot &lt;- function(shot_data, goal_data) {\n    # Summarise shots by 'Foot'\n    shots_by_type &lt;- shot_data %&gt;%\n      group_by(Type) %&gt;%\n      summarise(Shots = n())\n    \n    # Summarise goals by 'Foot'\n    goals_by_type &lt;- goal_data %&gt;%\n      group_by(Type) %&gt;%\n      summarise(Goals = n())  \n    \n    # Join the summarised data\n    conversion_rate_by_type_of_shot &lt;- left_join(shots_by_type, goals_by_type, by = \"Type\")\n    \n    # Replace NA values with 0 and calculate Goals per shot\n    conversion_rate_by_type_of_shot &lt;- conversion_rate_by_type_of_shot %&gt;%\n      select(Type, Goals, Shots) %&gt;%\n      replace(is.na(.), 0) %&gt;%\n      mutate(`Conversion rate` = percent(Goals / Shots))\n    \n    return(conversion_rate_by_type_of_shot)  \n  }\n  \n  ### Function to create circles and arcs for the heatmap\n  circle_function_heatmap &lt;- function(center=c(0,0), diameter=20, npoints=1000, start=0, end=2, rotation_angle = 0){\n    tt &lt;- seq(start*pi, end*pi, length.out=npoints)\n    circle_data &lt;- data.frame(\n      x = center[1] + diameter / 2 * cos(tt),\n      y = center[2] + diameter / 2 * sin(tt)\n    )\n    rotated_x &lt;- circle_data$x * cos(rotation_angle) - circle_data$y * sin(rotation_angle)\n    rotated_y &lt;- circle_data$x * sin(rotation_angle) + circle_data$y * cos(rotation_angle)\n    data.frame(\n      x = rotated_x,\n      y = rotated_y\n    )\n  }\n\n  \n  # Downloading a sample file to be used in the app\n  output$download_sample_data &lt;- downloadHandler(\n    filename = function() {\n      \"Ciaran_shot_data.xlsx\"\n    },\n    \n    content = function(file) {\n      # Read both sheets from the sample file\n      sheet1 &lt;- read_excel(\"Ciaran_shot_data.xlsx\", sheet = 1)\n      sheet2 &lt;- read_excel(\"Ciaran_shot_data.xlsx\", sheet = 2)\n      \n      # Create a new workbook and add the sheets\n      wb &lt;- createWorkbook()\n      addWorksheet(wb, \"Sheet1\")\n      writeData(wb, \"Sheet1\", sheet1)\n      addWorksheet(wb, \"Sheet2\")\n      writeData(wb, \"Sheet2\", sheet2)\n      \n      # Save the workbook to the specified file\n      saveWorkbook(wb, file, overwrite = TRUE)\n    }\n  )\n  \n  #### First tab ----\n  filtered_data &lt;- reactive({\n    \n    if(!is.null(input$file)) {\n      shot_data &lt;- read_excel(input$file$datapath, sheet = 1)\n      shot_data &lt;- shot_data %&gt;% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %&gt;%\n        separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n      shot_data$Outcome_filter &lt;- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n      match_stats &lt;- read_excel(input$file$datapath, sheet = 2)\n      shot_data &lt;- shot_data %&gt;% inner_join(match_stats, by = \"Week\")\n      filtered_data &lt;- shot_data\n      \n      selected_weeks &lt;- input$week[1]:input$week[2]\n      filtered_data &lt;- filtered_data[filtered_data$Week %in% selected_weeks, ]\n      \n      if (input$outcome != \"All\") {\n        filtered_data &lt;- filtered_data[filtered_data$Outcome_filter == input$outcome, ]\n      }\n      \n      if (input$foot != \"Either\") {\n        filtered_data &lt;- filtered_data[filtered_data$Foot == input$foot, ]\n      }\n      \n      if (input$type != \"All\") {\n        filtered_data &lt;- filtered_data[filtered_data$Type == input$type, ]\n      }\n      \n      if (input$first_time != \"Either\") {\n        filtered_data &lt;- filtered_data[filtered_data$`First time` == input$first_time, ]\n      }\n      \n      if (input$team != \"Either\") {\n        filtered_data &lt;- filtered_data[filtered_data$Team == input$team, ]\n      }\n      \n      if (input$result != \"Any\") {\n        filtered_data &lt;- filtered_data[filtered_data$`Team result` == input$result, ]\n      }\n      \n      aside &lt;- input$aside[1]:input$aside[2]\n      filtered_data &lt;- filtered_data[filtered_data$`How many aside` %in% aside, ]\n      \n      return(filtered_data)\n    }\n  })\n  \n  # Updating ui (e.g. sliders & select input values)\n  observe({\n    \n    if(!is.null(input$file)) {\n      shot_data &lt;- read_excel(input$file$datapath, sheet = 1)\n      shot_data$Outcome_filter &lt;- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n      match_stats &lt;- read_excel(input$file$datapath, sheet = 2)\n      shot_data &lt;- shot_data %&gt;% inner_join(match_stats, by = \"Week\")\n      \n      updateSliderInput(session, \"week\", max = max(shot_data$Week), value = c(1, max(shot_data$Week)))\n      updateSelectInput(session, \"outcome\", choices = c(\"All\", unique(shot_data$Outcome_filter)))\n      updateSelectInput(session, \"foot\", choices = c(\"Either\", unique(shot_data$Foot)))\n      updateSelectInput(session, \"type\", choices = c(\"All\", unique(shot_data$Type)))\n      updateSelectInput(session, \"first_time\", choices = c(\"Either\", unique(shot_data$`First time`)))\n      updateSelectInput(session, \"team\", choices = c(\"Either\", unique(shot_data$Team)))\n      updateSelectInput(session, \"result\", choices = c(\"Any\", unique(shot_data$`Team result`)))\n      updateSliderInput(session, \"aside\", min = min(shot_data$`How many aside`), max = max(shot_data$`How many aside`), value = c(min(shot_data$`How many aside`), max(shot_data$`How many aside`)))\n    }\n  })\n  \n  # Define a function to reset inputs to default values\n  resetInputs &lt;- function() {\n    observe({\n      \n      if(!is.null(input$file)) {\n        shot_data &lt;- read_excel(input$file$datapath, sheet = 1)\n        shot_data$Outcome_filter &lt;- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n        match_stats &lt;- read_excel(input$file$datapath, sheet = 2)\n        shot_data &lt;- shot_data %&gt;% inner_join(match_stats, by = \"Week\")\n        \n        updateSliderInput(session, \"week\", max = max(shot_data$Week), value = c(1, max(shot_data$Week)))\n        updateSelectInput(session, \"outcome\", selected = \"All\")\n        updateSelectInput(session, \"foot\", selected = \"Either\")\n        updateSelectInput(session, \"type\", selected = \"All\")\n        updateSelectInput(session, \"first_time\", selected = \"Either\")\n        updateSelectInput(session, \"team\", selected = \"Either\")\n        updateSelectInput(session, \"result\", selected = \"Any\")\n        updateSliderInput(session, \"aside\", value = c(min(shot_data$`How many aside`), max(shot_data$`How many aside`)))\n      }\n    })\n  }\n  \n  # Create an observe event for the reset button\n  observeEvent(input$resetButton, {\n    resetInputs()\n  })\n  \n  # Create a reactive table for shot data\n  output$shots_table &lt;- renderDataTable({\n    shot_data &lt;- filtered_data()\n    \n    if (is.null(shot_data)) {\n      return(NULL)\n    }\n    \n    shot_data %&gt;% select(-c(x_shot_location, y_shot_location, x_end_location, y_end_location, Outcome_filter))\n  }, options = list(lengthMenu = c(10, 25, 50), pageLength = 50))\n    \n  output$shotPlot &lt;- renderPlotly({\n    shot_data &lt;- filtered_data()\n    \n    if (is.null(shot_data)) {\n      return(NULL)\n    }\n    \n    shot_data$WrappedDescription &lt;- str_wrap(shot_data$Description, width = 40)\n    \n    shot_plot &lt;- hori5 +\n      geom_point(data = shot_data, aes(x = x_shot_location, y = y_shot_location, color = Outcome_filter,\n                                       text = paste(\"Week:\", Week, \"\\nFoot used:\", Foot, \"\\nType of shot:\", Type, \"\\nDescription:\", WrappedDescription)), size = 3) +\n      geom_segment(data = shot_data, aes(xend = x_end_location, yend = y_end_location, x = x_shot_location, y = y_shot_location, color = Outcome_filter),\n                   arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\")), lineend = \"round\", size = 0.2) +\n      guides(color = \"none\") +\n      scale_color_manual(values = c('No goal' = \"#FF0000\", Goal = \"#008B45\"))\n    \n    ggplotly(shot_plot, tooltip = \"text\")\n  })\n  \n  #### Tables and numbers in second tab ----\n  ### Updating ui (e.g. sliders & select input values)\n  observe({\n    \n    if(!is.null(input$file)) {\n      shot_data &lt;- read_excel(input$file$datapath, sheet = 1)\n      shot_data &lt;- shot_data %&gt;% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %&gt;%\n        separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n      shot_data$Outcome_filter &lt;- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n      match_stats &lt;- read_excel(input$file$datapath, sheet = 2)\n      shot_data &lt;- shot_data %&gt;% inner_join(match_stats, by = \"Week\")\n      how_many_aside_sorted &lt;- sort(unique(match_stats$`How many aside`))\n      \n      updatePickerInput(session, \"aside_for_calculations\", choices = how_many_aside_sorted, selected = how_many_aside_sorted)\n      updateSelectInput(session, \"result_for_calculations\", choices = c(\"Any\", unique(match_stats$`Team result`)))\n    }\n  })\n  \n  ### Based on teams result\n  ## For filters using match stats\n  match_stats_calculations &lt;- reactive({\n    \n    if(!is.null(input$file)) {\n      match_stats &lt;- read_excel(input$file$datapath, sheet = 2)\n      req(input$result_for_calculations)\n      if (input$result_for_calculations != \"Any\") {\n        filtered_stats &lt;- match_stats[match_stats$`Team result` == input$result_for_calculations, ]\n        return(filtered_stats)\n      } else {\n        return(match_stats)\n      }\n    }\n  })\n  \n  # Goals per game\n  output$goals_per_game_based_on_result &lt;- renderText({\n    filtered_data &lt;- match_stats_calculations()\n    games &lt;- nrow(filtered_data)\n    if (games &gt; 0) {\n      goals &lt;- sum(filtered_data$Goals)\n      goals_per_game &lt;- goals / games\n      return(round(goals_per_game, 2))\n    } else {\n      return(\"No data available\")\n    }\n  })\n  \n  # Conversion rate\n  output$goals_per_shot_based_on_result &lt;- renderText({\n    filtered_data &lt;- match_stats_calculations()\n    games &lt;- nrow(filtered_data)\n    if (games &gt; 0) {\n      goals &lt;- sum(filtered_data$Goals)\n      shots &lt;- sum(filtered_data$Shots)\n      goals_per_shot &lt;- goals / shots\n      return(percent(goals_per_shot))\n    } else {\n      return(\"No data available\")\n    }\n  })\n  \n  ## For filters using shot and goal stats\n  # Shot stats\n  shot_stats_calculations &lt;- reactive({\n    if(!is.null(input$file)) {\n      shot_data &lt;- read_excel(input$file$datapath, sheet = 1)\n      shot_data &lt;- shot_data %&gt;% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %&gt;%\n        separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n      shot_data$Outcome_filter &lt;- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n      match_stats &lt;- read_excel(input$file$datapath, sheet = 2)\n      shot_data &lt;- shot_data %&gt;% inner_join(match_stats, by = \"Week\")\n      req(input$result_for_calculations)\n      if (input$result_for_calculations != \"Any\") {\n        filtered_shot_stats &lt;- shot_data[shot_data$`Team result` == input$result_for_calculations, ]\n        return(filtered_shot_stats)\n      } else {\n        return(shot_data)\n      }\n    }\n  })\n  \n  # Goal stats\n  goal_stats_calculations &lt;- reactive({\n    if(!is.null(input$file)) {\n      shot_data &lt;- read_excel(input$file$datapath, sheet = 1)\n      shot_data &lt;- shot_data %&gt;% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %&gt;%\n        separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n      shot_data$Outcome_filter &lt;- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n      match_stats &lt;- read_excel(input$file$datapath, sheet = 2)\n      shot_data &lt;- shot_data %&gt;% inner_join(match_stats, by = \"Week\")\n      goal_data &lt;- shot_data %&gt;% filter(Outcome == \"Goal\")\n      req(input$result_for_calculations)\n      if (input$result_for_calculations != \"Any\") {\n        filtered_goal_stats &lt;- goal_data[goal_data$`Team result` == input$result_for_calculations, ]\n        return(filtered_goal_stats)\n      } else {\n        return(goal_data)\n      }\n    }\n  })\n  \n  # Conversion rate of first time shots\n  output$goals_by_first_time_shots_based_on_result &lt;- renderDataTable({\n    filtered_shot_data &lt;- shot_stats_calculations()\n    filtered_goal_data &lt;- goal_stats_calculations()\n    goals &lt;- nrow(filtered_goal_data)\n    if (goals &gt; 0) {\n      conversion_rate_by_first_time &lt;- calculate_conversion_rate_by_first_time(filtered_shot_data, filtered_goal_data)\n      return(conversion_rate_by_first_time)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  # Conversion rate by foot\n  output$goals_by_foot_based_on_result &lt;- renderDataTable({\n    filtered_shot_data &lt;- shot_stats_calculations()\n    filtered_goal_data &lt;- goal_stats_calculations()\n    goals &lt;- nrow(filtered_goal_data)\n    if (goals &gt; 0) {\n      conversion_rate_by_foot &lt;- calculate_conversion_rate_by_foot(filtered_shot_data, filtered_goal_data)\n      return(conversion_rate_by_foot)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  # Conversion rate by type of shot\n  output$goals_by_shot_type_based_on_result &lt;- renderDataTable({\n    filtered_shot_data &lt;- shot_stats_calculations()\n    filtered_goal_data &lt;- goal_stats_calculations()\n    goals &lt;- nrow(filtered_goal_data)\n    if (goals &gt; 0) {\n      conversion_rate_by_type_of_shot &lt;- calculate_conversion_rate_by_type_of_shot(filtered_shot_data, filtered_goal_data)\n      return(conversion_rate_by_type_of_shot)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  \n  ### Based on how many aside\n  ## For filters using match stats\n  match_stats_calculations_aside &lt;- reactive({\n    if(!is.null(input$file)) {\n      match_stats &lt;- read_excel(input$file$datapath, sheet = 2)\n      req(input$aside_for_calculations)\n      if (\"Any\" %in% input$aside_for_calculations) {\n        filtered_stats_aside &lt;- match_stats\n      } else {\n        filtered_stats_aside &lt;- match_stats[match_stats$`How many aside` %in% input$aside_for_calculations, ]\n      }\n      return(filtered_stats_aside)\n    }\n  })\n  \n  # Goals per game\n  output$goals_per_game_based_on_aside &lt;- renderText({\n    filtered_data_aside &lt;- match_stats_calculations_aside()\n    games &lt;- nrow(filtered_data_aside)\n    if (games &gt; 0) {\n      goals &lt;- sum(filtered_data_aside$Goals)\n      goals_per_game &lt;- goals / games\n      return(round(goals_per_game, 2))\n    } else {\n      return(\"No data available\")\n    }\n  })\n  \n  # Conversion rate\n  output$goals_per_shot_based_on_aside &lt;- renderText({\n    filtered_data_aside &lt;- match_stats_calculations_aside()\n    games &lt;- nrow(filtered_data_aside)\n    if (games &gt; 0) {\n      goals &lt;- sum(filtered_data_aside$Goals)\n      shots &lt;- sum(filtered_data_aside$Shots)\n      goals_per_shot &lt;- goals / shots\n      return(percent(goals_per_shot))\n    } else {\n      return(\"No data available\")\n    }\n  })\n  \n  ## For filters using shot and goal stats\n  # Shot stats\n  shot_stats_calculations_aside &lt;- reactive({\n    if(!is.null(input$file)) {\n      shot_data &lt;- read_excel(input$file$datapath, sheet = 1)\n      shot_data &lt;- shot_data %&gt;% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %&gt;%\n        separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n      shot_data$Outcome_filter &lt;- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n      match_stats &lt;- read_excel(input$file$datapath, sheet = 2)\n      shot_data &lt;- shot_data %&gt;% inner_join(match_stats, by = \"Week\")\n      req(input$aside_for_calculations)\n      if (\"Any\" %in% input$aside_for_calculations) {\n        return(shot_data)\n      } else {\n        filtered_shot_stats_aside &lt;- shot_data[shot_data$`How many aside` %in% input$aside_for_calculations, ]\n        return(filtered_shot_stats_aside)\n      }\n    }\n  })\n  \n  # Goal stats\n  goal_stats_calculations_aside &lt;- reactive({\n    if(!is.null(input$file)) {\n      shot_data &lt;- read_excel(input$file$datapath, sheet = 1)\n      shot_data &lt;- shot_data %&gt;% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %&gt;%\n        separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n      shot_data$Outcome_filter &lt;- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n      match_stats &lt;- read_excel(input$file$datapath, sheet = 2)\n      shot_data &lt;- shot_data %&gt;% inner_join(match_stats, by = \"Week\")\n      goal_data &lt;- shot_data %&gt;% filter(Outcome == \"Goal\")\n      req(input$aside_for_calculations)\n      if (\"Any\" %in% input$aside_for_calculations) {\n        return(goal_data)\n      } else {\n        filtered_goal_stats_aside &lt;- goal_data[goal_data$`How many aside` %in% input$aside_for_calculations, ]\n        return(filtered_goal_stats_aside)\n      }\n    }\n  })\n  \n  # Conversion rate of first time shots\n  output$goals_by_first_time_shots_based_on_aside &lt;- renderDataTable({\n    filtered_shot_data_aside &lt;- shot_stats_calculations_aside()\n    filtered_goal_data_aside &lt;- goal_stats_calculations_aside()\n    goals &lt;- nrow(filtered_goal_data_aside)\n    if (goals &gt; 0) {\n      conversion_rate_by_first_time_aside &lt;- calculate_conversion_rate_by_first_time(filtered_shot_data_aside, filtered_goal_data_aside)\n      return(conversion_rate_by_first_time_aside)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  # Conversion rate by foot\n  output$goals_by_foot_based_on_aside &lt;- renderDataTable({\n    filtered_shot_data_aside &lt;- shot_stats_calculations_aside()\n    filtered_goal_data_aside &lt;- goal_stats_calculations_aside()\n    goals &lt;- nrow(filtered_goal_data_aside)\n    if (goals &gt; 0) {\n      conversion_rate_by_foot_aside &lt;- calculate_conversion_rate_by_foot(filtered_shot_data_aside, filtered_goal_data_aside)\n      return(conversion_rate_by_foot_aside)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  # Conversion rate by type of shot\n  output$goals_by_shot_type_based_on_aside &lt;- renderDataTable({\n    filtered_shot_data_aside &lt;- shot_stats_calculations_aside()\n    filtered_goal_data_aside &lt;- goal_stats_calculations_aside()\n    goals &lt;- nrow(filtered_goal_data_aside)\n    if (goals &gt; 0) {\n      conversion_rate_by_type_of_shot_aside &lt;- calculate_conversion_rate_by_type_of_shot(filtered_shot_data_aside, filtered_goal_data_aside)\n      return(conversion_rate_by_type_of_shot_aside)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  \n  #### Table with full weekly stats ----\n  weekly_stats &lt;- reactive({\n    if(!is.null(input$file)) {\n      match_stats &lt;- read_excel(input$file$datapath, sheet = 2)\n      \n      return(match_stats)\n    }\n  })\n  \n  output$stats_table &lt;- renderDataTable(\n    weekly_stats(),\n    options=list(lengthMenu=list(c(20,-1),list('20','All')),\n               pageLength=20,dom='Bipt'))\n  \n  #### Heatmap ----\n  heatmap_data &lt;- reactive({\n    \n    if(!is.null(input$file)) {\n      shot_heatmap_data &lt;- read_excel(input$file$datapath, sheet = 1) %&gt;%\n        select(\"Outcome\", \"Location\") %&gt;%\n        separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T)\n      shot_heatmap_data$Outcome &lt;- ifelse(shot_heatmap_data$Outcome == 'Goal', 1, 0)\n      \n      shot_heatmap_data &lt;- shot_heatmap_data %&gt;%\n        mutate(y_shot_location = ifelse(y_shot_location &gt;= 0 & y_shot_location &lt;= 5, 2.5,\n                                        ifelse(y_shot_location &gt; 5 & y_shot_location &lt;= 10, 7.5,\n                                               ifelse(y_shot_location &gt; 10 & y_shot_location &lt;= 15, 12.5,\n                                                      ifelse(y_shot_location &gt; 15 & y_shot_location &lt;= 20, 17.5,\n                                                             ifelse(y_shot_location &gt; 20 & y_shot_location &lt;= 25, 22.5,\n                                                                    ifelse(y_shot_location &gt; 25 & y_shot_location &lt;= 30, 27.5,\n                                                                           ifelse(y_shot_location &gt; 30 & y_shot_location &lt;= 35, 32.5,\n                                                                                  ifelse(y_shot_location &gt; 35 & y_shot_location &lt;= 40, 37.5, y_shot_location)))))))))\n      \n      shot_heatmap_data &lt;- shot_heatmap_data %&gt;%\n        mutate(x_shot_location = ifelse(x_shot_location &gt;= 0 & x_shot_location &lt;= 5, 2.5,\n                                        ifelse(x_shot_location &gt; 5 & x_shot_location &lt;= 10, 7.5,\n                                               ifelse(x_shot_location &gt; 10 & x_shot_location &lt;= 15, 12.5,\n                                                      ifelse(x_shot_location &gt; 15 & x_shot_location &lt;= 20, 17.5,\n                                                             ifelse(x_shot_location &gt; 20 & x_shot_location &lt;= 25, 22.5,\n                                                                    ifelse(x_shot_location &gt; 25 & x_shot_location &lt;= 30, 27.5,\n                                                                           ifelse(x_shot_location &gt;= 30 & x_shot_location &lt;= 35, 32.5,\n                                                                                  ifelse(x_shot_location &gt; 35 & x_shot_location &lt;= 40, 37.5,\n                                                                                         ifelse(x_shot_location &gt; 40 & x_shot_location &lt;= 45, 42.5,\n                                                                                                ifelse(x_shot_location &gt; 45 & x_shot_location &lt;= 50, 47.5,\n                                                                                                       ifelse(x_shot_location &gt; 50 & x_shot_location &lt;= 55, 52.5,\n                                                                                                              ifelse(x_shot_location &gt; 55 & x_shot_location &lt;= 60, 57.5, x_shot_location)))))))))))))\n      \n      goals_heatmap &lt;- shot_heatmap_data %&gt;%\n        group_by(x_shot_location, y_shot_location) %&gt;%\n        summarise(goals = sum(Outcome))\n      \n      shots_heatmap &lt;- shot_heatmap_data %&gt;%\n        group_by(x_shot_location, y_shot_location) %&gt;%\n        summarise(shots = n())\n      \n      football_heatmap &lt;- left_join(goals_heatmap, shots_heatmap, by = c(\"x_shot_location\", \"y_shot_location\"))\n      football_heatmap &lt;- football_heatmap %&gt;% mutate(`Conversion rate` = round((goals/shots)*100, 0))\n      \n      return(football_heatmap)\n    }\n  })\n  \n  output$heatmap &lt;- renderPlotly({\n    football_heatmap &lt;- heatmap_data()\n    \n    if (is.null(football_heatmap)) {\n      return(NULL)\n    }\n    \n    # create markings on football pitch\n    football_pitch_lines &lt;- data.frame(\n      x = c(0, 30, 60, 0, 0),\n      y = c(0, 0, 0, 0, 40),\n      xend = c(0, 30, 60, 60, 60),\n      yend = c(40, 40, 40, 0, 40)\n    )\n    center_circle &lt;- circle_function_heatmap(center = c(30,20))\n    penalty_arc_att &lt;- circle_function_heatmap(center = c(20, -60), npoints = 1000, end = 1, rotation_angle = pi / 2)\n    penalty_arc_def &lt;- circle_function_heatmap(center = c(20, 0), npoints = 1000, end = 1, rotation_angle = pi / 2)\n    penalty_arc_def$x &lt;- -penalty_arc_def$x\n    penalty_spot_att &lt;- circle_function_heatmap(center = c(7,20), diameter = 0.2)\n    penalty_spot_def &lt;- circle_function_heatmap(center = c(53,20), diameter = 0.2)\n    \n    colfunc &lt;- colorRampPalette(c(\"#BCE4D8\", \"#2C5985\"))\n    \n    heatmap_with_pitch &lt;- ggplot(football_heatmap, aes(x_shot_location, y_shot_location)) +\n      geom_tile(aes(fill=`Conversion rate`, text = paste0(\"Conversion rate: \", `Conversion rate`, \"%\", \"\\nGoals: \", goals, \"\\nShots: \", shots)), size = 3) +\n      scale_fill_gradientn(colors = colfunc(30)) +\n      theme_classic() +\n      theme(panel.background = element_rect(fill = 'black'),\n            axis.line = element_blank(),\n            axis.text = element_blank(),\n            axis.ticks = element_blank(),\n            axis.title = element_blank(),\n            legend.position = \"none\") +\n      geom_segment(data = football_pitch_lines, aes(x = x, y = y, xend = xend, yend = yend), color = \"white\", size = 1) +\n      geom_point(data = center_circle, aes(x = x, y = y), color = \"white\", size = 0.2) +\n      geom_point(data = penalty_arc_att, aes(x = x, y = y), color = \"white\", size = 0.2) +\n      geom_point(data = penalty_arc_def, aes(x = x, y = y), color = \"white\", size = 0.2) +\n      geom_point(data = penalty_spot_att, aes(x = x, y = y), color = \"white\", size = 0.6) +\n      geom_point(data = penalty_spot_def, aes(x = x, y = y), color = \"white\", size = 0.6)\n    \n    plotly_heatmap &lt;- ggplotly(heatmap_with_pitch, tooltip = \"text\") %&gt;%\n      layout(autosize = TRUE,  margin = list(autoexpand = TRUE), height = 700, width = 1200)\n    \n    return(plotly_heatmap)\n    \n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  }
]