[
  {
    "objectID": "shinylive-github-pages.html",
    "href": "shinylive-github-pages.html",
    "title": "shinylive-github-pages",
    "section": "",
    "text": "#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(plotly)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(scales)\nlibrary(ggplot2)\n\nui <- fluidPage(\n  tags$style(\n    HTML(\"\n      .output-wrapper {\n        display: flex;\n        align-items: center;\n        margin-bottom: 10px;\n      }\n      h4 {\n        margin-right: 10px;\n      }\n    \")\n  ),\n  \n  titlePanel(\"Football stats app\"),\n  \n  tabsetPanel(\n    tabPanel(\"Set-up\",\n      # Input: load in data\n      fileInput(inputId = \"file\",\n                label = \"Upload your shot data\"),\n    ),\n    tabPanel(\"Shot map\",\n  \n      sidebarLayout(\n        \n        # Sidebar panel for inputs ----\n        sidebarPanel(\n          \n          # Input: Slider for the week(s) played ----\n          sliderInput(inputId = \"week\",\n                      label = \"Week(s) played:\",\n                      min = 1,\n                      max = 1,  # Initialize with a default value\n                      value = c(1, 1),  # Initialize with a default value\n                      step = 1),\n          \n          # Input: Outcome of shot ----\n          selectInput(inputId = \"outcome\",\n                      label = \"Select Shot Outcome\",\n                      c(\"All\")),\n          \n          # Input: Foot used for shot ----\n          selectInput(inputId = \"foot\",\n                      label = \"Select which foot was used for shot\",\n                      c(\"Either\")),\n          \n          # Input: Shot type ----\n          selectInput(inputId = \"type\",\n                      label = \"Select what type the shot was\",\n                      c(\"All\")),\n          \n          # Input: Shot first time ----\n          selectInput(inputId = \"first_time\",\n                      label = \"Select whether the shot was taken first time or not\",\n                      c(\"Either\")),\n          \n          # Input: Which team was I on ----\n          selectInput(inputId = \"team\",\n                      label = \"Select which team I played on that week\",\n                      c(\"Either\")),\n          \n          # Input: Team result ----\n          selectInput(inputId = \"result\",\n                      label = \"Select my team's result\",\n                      c(\"Any\")),\n          \n          # Input: Slider for the number of players aside ----\n          sliderInput(inputId = \"aside\",\n                      label = \"Players aside:\",\n                      min = 1,\n                      max = 1,\n                      value = c(1, 1),\n                      step = 1),\n          \n          # Checbox: if checked, then blocked shots are excluded from plot\n          checkboxInput(inputId = \"excludeBlocked\",\n                        label = \"Exclude Blocked Shots\",\n                        value = TRUE),\n          \n          # Button that resets all inputs to their default\n          actionButton(\"resetButton\", \"Clear selections\")\n        ),\n        \n        # Main panel for displaying outputs ----\n        mainPanel(\n          \n          # Output: Shot Map ----\n          plotlyOutput(outputId = \"shotPlot\"),\n          \n          #Output: Datatable for shots stats ----\n          dataTableOutput(\"shots_table\")\n          \n        )\n      )\n    ),\n    tabPanel(\"Breakdown of shots\",\n             mainPanel(\n               fluidRow(\n                 column(width = 6,\n                        #Output: Breakdown of shots based on result ----\n                        tags$h2(\"Stats based on result\"),\n                        selectInput(inputId = \"result_for_calculations\",\n                                    label = \"Select my team's result\",\n                                    c(\"Any\")),\n                        div(class = \"output-wrapper\",\n                            h4(\"Goals per game:\"),\n                            div(textOutput(\"goals_per_game_based_on_result\"))),\n                        div(class = \"output-wrapper\",\n                            h4(\"Conversion rate:\"),\n                            div(textOutput(\"goals_per_shot_based_on_result\"))),\n                        h4(\"Conversion rate with first time\"),\n                        dataTableOutput(\"goals_by_first_time_shots_based_on_result\"),\n                        h4(\"Conversion rate by foot\"),\n                        dataTableOutput(\"goals_by_foot_based_on_result\"),\n                        h4(\"Conversion rate by type of shot\"),\n                        dataTableOutput(\"goals_by_shot_type_based_on_result\")\n                 ),\n                 column(width = 6,\n                        #Output: Breakdown of shots based on how many aside ----\n                        tags$h2(\"Stats based on how many aside\"),\n                        selectizeInput(inputId = \"aside_for_calculations\",\n                                       label = \"Select how many players there were aside\",\n                                       c(\"Any\"),\n                                       selected = \"Any\",\n                                       multiple = TRUE),\n                        div(class = \"output-wrapper\",\n                            h4(\"Goals per game:\"),\n                            div(textOutput(\"goals_per_game_based_on_aside\"))),\n                        div(class = \"output-wrapper\",\n                            h4(\"Conversion rate:\"),\n                            div(textOutput(\"goals_per_shot_based_on_aside\"))),\n                        h4(\"Conversion rate with first time\"),\n                        dataTableOutput(\"goals_by_first_time_shots_based_on_aside\"),\n                        h4(\"Conversion rate by foot\"),\n                        dataTableOutput(\"goals_by_foot_based_on_aside\"),\n                        h4(\"Conversion rate by type of shot\"),\n                        dataTableOutput(\"goals_by_shot_type_based_on_aside\")\n                 )\n               )\n             )\n    ),\n    tabPanel(\"Weekly stats\",\n      mainPanel(\n          #Output: Datatable for week by week stats ----\n          dataTableOutput(\"stats_table\")\n      )\n    ),\n    tabPanel(\"Heatmap\",\n      plotlyOutput(outputId = \"heatmap\")\n    )\n  )\n)\n\n# Define server logic required for the Shiny app ----\nserver <- function(input, output, session) {\n  \n  #### Creating pitch ----\n  stadiumlength <- 60\n  stadiumwidth <- 40\n  linewidth <- .12\n  goalboxlength <- 16.5\n  goalboxpos <- (stadiumwidth-goalboxlength*2-13)/2 ###to change goal width\n  smallboxlength <- 5.5\n  smallboxpos <- goalboxpos+goalboxlength-smallboxlength\n  crossbarl <- 4\n  crossbarh <- 2.44\n  goalpos <- goalboxpos+goalboxlength\n  attdefzone <- 30\n  channel <- 4\n  channelsplit <- 25\n  \n  ##Define the circle function that we will be using to create the center cirlce as well as the 18 yard box circles\n  circle_fun <- function(center=c(0,0), diameter=1, npoints=1000, start=0, end=2){\n    tt <- seq(start*pi, end*pi, length.out=npoints)\n    data.frame(\n      x = center[1] + diameter / 2 * cos(tt),\n      y = center[2] + diameter / 2 * sin(tt)\n    )\n  }\n  \n  ##everything we build on one side of the pitch should be mirrored on the other side of the pitch\n  ##this assumes that our pitch diagram goes down -> up\n  mirror <- function(x) stadiumlength-x\n  \n  ## To use ggplot2, we need to define all the points that will go into the shape of the field\n  ## The four parameters are: x (width values), y (length values), group (for the two sides), desc (a description for ease of use and further customization)\n  segment_coord <- function(x, y, group, desc){\n    segment_df <- data.frame(x = x, y = y) \n    segment_df$group <- group\n    segment_df$side <- 1\n    group <- group + 1\n    \n    # The same thing for the opposite side\n    segment_df2 <- data.frame(x = x, y = mirror(y))\n    segment_df2$group <- group\n    segment_df2$side <- 2\n    group <<- group + 1\n    \n    # On reunit les donnees\n    segment_df <- rbind(segment_df, segment_df2)\n    segment_df$desc <- desc\n    \n    return(segment_df)\n  }\n  \n  ####this function will rotate the pitch if you want to see the field horizontally \n  rotate_pitch <- function(pitch, theta=pi/2){\n    pitch_r <- pitch\n    pitch_r$x <- pitch_r$x / 180 * pi\n    pitch_r$y <- pitch_r$y / 180 * pi\n    matrix_r <- matrix(c(cos(theta), sin(theta), -sin(theta), cos(theta)), ncol = 2)\n    coords_r <- apply(pitch_r[,c(\"x\",\"y\")], 1, function(x) x %*% matrix_r)\n    pitch_r$x <- coords_r[1,] ; pitch_r$y <- coords_r[2,]\n    pitch_r$x <- pitch_r$x * 180 / pi\n    pitch_r$y <- pitch_r$y * 180 / pi\n    return(pitch_r)\n  }\n  \n  \n  ##Here we define the circles we need for our field. Our field lines have width of 12cm.\n  #Center Circle -- at midpoint of the halfway line, with radius of 9.15m (10 yards)\n  centercircle_outer <- circle_fun(center=c(stadiumwidth/2,stadiumlength/2),diameter = 5 * 2)\n  centercircle_inner <- circle_fun(center=c(stadiumwidth/2,stadiumlength/2),diameter = (5-linewidth) * 2)\n  \n  #Penalty Arc -- arc from penalty spot (11 meters, 12 yards) with radius of 9.15 m (10 yards) ####diameter on both to change size\n  penaltyarc_outer <- circle_fun(center=c(stadiumwidth/2,0),diameter = 10 * 2)\n  penaltyarc_inner <- circle_fun(center=c(stadiumwidth/2,0),diameter = (10-linewidth) * 2)\n  \n  #corner arcs\n  cornerarc_outer_r <- circle_fun(center = c(stadiumwidth,0),diameter = 1*2)\n  cornerarc_inner_r <- circle_fun(center = c(stadiumwidth,0),diameter = (1-linewidth)*2)\n  \n  cornerarc_outer_l <- circle_fun(center = c(0,0),diameter = 1*2)\n  cornerarc_inner_l <- circle_fun(center = c(0,0),diameter = (1-linewidth)*2)\n  \n  #penalty spot\n  penaltyspot <- circle_fun(center=c(stadiumwidth/2,7),diameter=.5*2) #####second value in center function to change position\n  \n  \n  ##Now, we generate our dataframe that contains the points for all of our field markings\n  group <- 1\n  \n  pitch <- segment_coord(x=c(0-linewidth,0-linewidth,stadiumwidth+linewidth,stadiumwidth+linewidth)\n                         ,y=c(0-linewidth,0,0,0-linewidth),group=group,desc = \"goal line\") \n  \n  pitch <- rbind(pitch,segment_coord(x=c(0-linewidth,0-linewidth,0,0)\n                                     ,y=c(0,stadiumlength/2-linewidth/2,stadiumlength/2-linewidth/2,0),group=group,desc = \"left touch line\"))\n  \n  pitch <- rbind(pitch,segment_coord(x=c(stadiumwidth,stadiumwidth,stadiumwidth+linewidth,stadiumwidth+linewidth)\n                                     ,y=c(0,stadiumlength/2-linewidth/2,stadiumlength/2-linewidth/2,0),group=group,desc = \"right touch line\"))\n  \n  pitch <- rbind(pitch, segment_coord(x=c(goalpos-linewidth,goalpos-linewidth,goalpos,goalpos)\n                                      ,y=c(0-crossbarh,0,0,0-crossbarh),group=group,desc = \"left goal post\"))\n  \n  pitch <- rbind(pitch, segment_coord(x=c(stadiumwidth-goalpos-linewidth,stadiumwidth-goalpos-linewidth,stadiumwidth-goalpos,stadiumwidth-goalpos)\n                                      ,y=c(0-crossbarh,0,0,0-crossbarh),group=group,desc = \"right goal post\"))\n  \n  pitch <- rbind(pitch, segment_coord(x=c(goalpos-linewidth,goalpos-linewidth,stadiumwidth-goalpos,stadiumwidth-goalpos)\n                                      ,y=c(0-crossbarh,0-crossbarh,0-crossbarh,0-crossbarh),group=group,desc = \"crossbar\"))\n  \n  pitch <- rbind(pitch, segment_coord(x=penaltyspot[,\"x\"]\n                                      ,y=penaltyspot[,\"y\"],group=group,desc = \"penalty spot\"))\n  \n  pitch <- rbind(pitch, segment_coord(x=c(centercircle_outer[centercircle_outer$y<=stadiumlength/2,\"x\"],rev(centercircle_inner[centercircle_inner$y<=stadiumlength/2,\"x\"]))\n                                      ,y=c(centercircle_outer[centercircle_outer$y<=stadiumlength/2,\"y\"],rev(centercircle_inner[centercircle_inner$y<=stadiumlength/2,\"y\"])),group=group,desc = \"center circle\"))\n  \n  pitch <- rbind(pitch, segment_coord(x=c(0-linewidth,0-linewidth,stadiumwidth+linewidth,stadiumwidth+linewidth)\n                                      ,y=c(stadiumlength/2-linewidth/2,stadiumlength/2+linewidth/2,stadiumlength/2+linewidth/2,stadiumlength/2-linewidth/2),group=group,desc = \"halfway line\"))\n  \n  pitch <- rbind(pitch, segment_coord(x=c(penaltyarc_outer[penaltyarc_outer$y>=linewidth,\"x\"],rev(penaltyarc_inner[penaltyarc_inner$y>=linewidth,\"x\"]))\n                                      ,y=c(penaltyarc_outer[penaltyarc_outer$y>=linewidth,\"y\"],rev(penaltyarc_inner[penaltyarc_inner$y>=linewidth,\"y\"])),group=group,desc = \"penalty arc\"))\n  \n  pitch <- rbind(pitch, segment_coord(x=c(cornerarc_outer_l[cornerarc_outer_l$x>=0 & cornerarc_outer_l$y>=0,\"x\"],rev(cornerarc_inner_l[cornerarc_inner_l$x>=0 & cornerarc_inner_l$y>=0,\"x\"]))\n                                      ,y=c(cornerarc_outer_l[cornerarc_outer_l$x>=0 & cornerarc_outer_l$y>=0,\"y\"],rev(cornerarc_inner_l[cornerarc_inner_l$x>=0 & cornerarc_inner_l$y>=0,\"y\"])),group=group,desc = \"left corner\"))\n  \n  pitch <- rbind(pitch, segment_coord(x=c(cornerarc_outer_r[cornerarc_outer_r$x>=0&cornerarc_outer_r$x<=stadiumwidth & cornerarc_outer_r$y>=0,\"x\"],rev(cornerarc_inner_r[cornerarc_inner_r$x>=0&cornerarc_inner_r$x<=stadiumwidth& cornerarc_inner_r$y>=0,\"x\"]))\n                                      ,y=c(cornerarc_outer_r[cornerarc_outer_r$x>=0&cornerarc_outer_r$x<=stadiumwidth & cornerarc_outer_r$y>=0,\"y\"],rev(cornerarc_inner_r[cornerarc_inner_r$x>=0&cornerarc_inner_r$x<=stadiumwidth & cornerarc_inner_r$y>=0,\"y\"])),group=group,desc = \"right corner\"))\n  \n  \n  #Rotated Pitch\n  horipitch <- rotate_pitch(pitch, theta = pi/2)\n  horipitch2 <- horipitch\n  horipitch2$y <- horipitch2$y * -1\n  \n  hori5 <- ggplot()+ geom_polygon(data = horipitch2[horipitch2$group %in% seq(1:36),], aes(x = x, y = y, group = group), col = \"#0D0D0D\") +\n    coord_equal() +\n    scale_x_continuous(breaks = NULL) +\n    scale_y_continuous(breaks = NULL) +\n    xlab(\"\") + ylab(\"\") +\n    theme(axis.text.x = element_blank(),\n          axis.text.y = element_blank(), \n          axis.ticks.x = element_blank(),\n          axis.ticks.y = element_blank(), axis.title = element_blank(),\n          panel.background = element_rect(fill = \"#FFFFFFB3\",\n                                          colour = \"#FFFFFFB3\")\n    )\n  \n  #### Functions ----\n  ### Function to create conversion rate with first time shots\n  calculate_conversion_rate_by_first_time <- function(shot_data, goal_data) {\n    # Summarise shots by 'First time'\n    shots_by_first_time <- shot_data %>%\n      group_by(`First time`) %>%\n      summarise(Shots = n())\n    \n    # Summarise goals by 'First time'\n    goals_by_first_time <- goal_data %>%\n      group_by(`First time`) %>%\n      summarise(Goals = n())\n    \n    # Join the summarised data\n    conversion_rate_by_first_time <- left_join(shots_by_first_time, goals_by_first_time, by = \"First time\")\n    \n    # Replace NA values with 0 and calculate Goals per shot\n    conversion_rate_by_first_time <- conversion_rate_by_first_time %>%\n      select(`First time`, Goals, Shots) %>%\n      replace(is.na(.), 0) %>%\n      mutate(`Conversion rate` = percent(Goals / Shots))\n    \n    return(conversion_rate_by_first_time)\n  }\n  \n  \n  ### Function to create conversion rate by foot\n  calculate_conversion_rate_by_foot <- function(shot_data, goal_data) {\n    # Summarise shots by 'Foot'\n    shots_by_foot <- shot_data %>%\n      group_by(Foot) %>%\n      summarise(Shots = n())\n    \n    # Summarise goals by 'Foot'\n    goals_by_foot <- goal_data %>%\n      group_by(Foot) %>%\n      summarise(Goals = n())  \n  \n    # Join the summarised data\n    conversion_rate_by_foot <- left_join(shots_by_foot, goals_by_foot, by = \"Foot\")\n    \n    # Replace NA values with 0 and calculate Goals per shot\n    conversion_rate_by_foot <- conversion_rate_by_foot %>%\n      select(Foot, Goals, Shots) %>%\n      replace(is.na(.), 0) %>%\n      mutate(`Conversion rate` = percent(Goals / Shots))\n    \n    return(conversion_rate_by_foot)  \n  }\n  \n  \n  ### Function to create conversion rate by type of shot\n  calculate_conversion_rate_by_type_of_shot <- function(shot_data, goal_data) {\n    # Summarise shots by 'Foot'\n    shots_by_type <- shot_data %>%\n      group_by(Type) %>%\n      summarise(Shots = n())\n    \n    # Summarise goals by 'Foot'\n    goals_by_type <- goal_data %>%\n      group_by(Type) %>%\n      summarise(Goals = n())  \n    \n    # Join the summarised data\n    conversion_rate_by_type_of_shot <- left_join(shots_by_type, goals_by_type, by = \"Type\")\n    \n    # Replace NA values with 0 and calculate Goals per shot\n    conversion_rate_by_type_of_shot <- conversion_rate_by_type_of_shot %>%\n      select(Type, Goals, Shots) %>%\n      replace(is.na(.), 0) %>%\n      mutate(`Conversion rate` = percent(Goals / Shots))\n    \n    return(conversion_rate_by_type_of_shot)  \n  }\n  \n  ### Function to create circles and arcs for the heatmap\n  circle_function_heatmap <- function(center=c(0,0), diameter=20, npoints=1000, start=0, end=2, rotation_angle = 0){\n    tt <- seq(start*pi, end*pi, length.out=npoints)\n    circle_data <- data.frame(\n      x = center[1] + diameter / 2 * cos(tt),\n      y = center[2] + diameter / 2 * sin(tt)\n    )\n    rotated_x <- circle_data$x * cos(rotation_angle) - circle_data$y * sin(rotation_angle)\n    rotated_y <- circle_data$x * sin(rotation_angle) + circle_data$y * cos(rotation_angle)\n    data.frame(\n      x = rotated_x,\n      y = rotated_y\n    )\n  }\n\n  \n  #### First tab ----\n  filtered_data <- reactive({\n    req(input$file)\n    \n    shot_data <- read_excel(input$file$datapath, sheet = 1)\n    shot_data <- shot_data %>% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %>%\n      separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',\n                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))\n    \n    match_stats <- read_excel(input$file$datapath, sheet = 2)\n    shot_data <- shot_data %>% inner_join(match_stats, by = \"Week\")\n    filtered_data <- shot_data\n    \n    if (input$excludeBlocked) {\n      filtered_data <- filtered_data %>% filter(Outcome != \"Blocked\")\n    }\n    \n    selected_weeks <- input$week[1]:input$week[2]\n    filtered_data <- filtered_data[filtered_data$Week %in% selected_weeks, ]\n    \n    if (input$outcome != \"All\") {\n      filtered_data <- filtered_data[filtered_data$Outcome_filter == input$outcome, ]\n    }\n    \n    if (input$foot != \"Either\") {\n      filtered_data <- filtered_data[filtered_data$Foot == input$foot, ]\n    }\n    \n    if (input$type != \"All\") {\n      filtered_data <- filtered_data[filtered_data$Type == input$type, ]\n    }\n\n    if (input$first_time != \"Either\") {\n      filtered_data <- filtered_data[filtered_data$`First time` == input$first_time, ]\n    }\n\n    if (input$team != \"Either\") {\n      filtered_data <- filtered_data[filtered_data$Team == input$team, ]\n    }\n\n    if (input$result != \"Any\") {\n      filtered_data <- filtered_data[filtered_data$`Team result` == input$result, ]\n    }\n\n    aside <- input$aside[1]:input$aside[2]\n    filtered_data <- filtered_data[filtered_data$`How many aside` %in% aside, ]\n    \n    return(filtered_data)\n  })\n  \n  # Updating ui (e.g. sliders & select input values)\n  observe({\n    req(input$file)\n    \n    shot_data <- read_excel(input$file$datapath, sheet = 1)\n    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n    match_stats <- read_excel(input$file$datapath, sheet = 2)\n    shot_data <- shot_data %>% inner_join(match_stats, by = \"Week\")\n    \n    updateSliderInput(session, \"week\", max = max(shot_data$Week), value = c(1, length(unique(shot_data$Week))))\n    updateSelectInput(session, \"outcome\", choices = c(\"All\", unique(shot_data$Outcome_filter)))\n    updateSelectInput(session, \"foot\", choices = c(\"Either\", unique(shot_data$Foot)))\n    updateSelectInput(session, \"type\", choices = c(\"All\", unique(shot_data$Type)))\n    updateSelectInput(session, \"first_time\", choices = c(\"Either\", unique(shot_data$`First time`)))\n    updateSelectInput(session, \"team\", choices = c(\"Either\", unique(shot_data$Team)))\n    updateSelectInput(session, \"result\", choices = c(\"Any\", unique(shot_data$`Team result`)))\n    updateSliderInput(session, \"aside\", min = min(shot_data$`How many aside`), max = max(shot_data$`How many aside`), value = c(min(shot_data$`How many aside`), max(shot_data$`How many aside`)))\n  })\n  \n  # Define a function to reset inputs to default values\n  resetInputs <- function() {\n    observe({\n      req(input$file)\n      \n      shot_data <- read_excel(input$file$datapath, sheet = 1)\n      shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n      match_stats <- read_excel(input$file$datapath, sheet = 2)\n      shot_data <- shot_data %>% inner_join(match_stats, by = \"Week\")\n      \n      updateSliderInput(session, \"week\", value = c(1, length(unique(shot_data$Week))))\n      updateSelectInput(session, \"outcome\", selected = \"All\")\n      updateSelectInput(session, \"foot\", selected = \"Either\")\n      updateSelectInput(session, \"type\", selected = \"All\")\n      updateSelectInput(session, \"first_time\", selected = \"Either\")\n      updateSelectInput(session, \"team\", selected = \"Either\")\n      updateSelectInput(session, \"result\", selected = \"Any\")\n      updateSliderInput(session, \"aside\", value = c(min(shot_data$`How many aside`), max(shot_data$`How many aside`)))\n      updateCheckboxInput(session, \"excludeBlocked\", value = TRUE)\n    })\n  }\n  \n  # Create an observe event for the reset button\n  observeEvent(input$resetButton, {\n    resetInputs()\n  })\n  \n  # Create a reactive table for shot data\n  output$shots_table <- renderDataTable({\n    shot_data <- filtered_data()\n    \n    if (is.null(shot_data)) {\n      return(NULL)\n    }\n    \n    shot_data %>% select(-c(x_shot_location, y_shot_location, x_end_location, y_end_location, Outcome_filter, Outcome_colour))\n  }, options = list(lengthMenu = c(10, 25, 50), pageLength = 50))\n    \n  output$shotPlot <- renderPlotly({\n    shot_data <- filtered_data()\n    \n    if (is.null(shot_data)) {\n      return(NULL)\n    }\n    \n    shot_data$WrappedDescription <- str_wrap(shot_data$Description, width = 40)\n    \n    shot_plot <- hori5 +\n      geom_point(data = shot_data, aes(x = x_shot_location, y = y_shot_location, color = Outcome_colour,\n                                       text = paste(\"Week:\", Week, \"\\nFoot used:\", Foot, \"\\nType of shot:\", Type, \"\\nDescription:\", WrappedDescription)), size = 3) +\n      geom_segment(data = shot_data, aes(xend = x_end_location, yend = y_end_location, x = x_shot_location, y = y_shot_location, color = Outcome_colour),\n                   arrow = arrow(type = \"closed\", length = unit(0.2, \"inches\")), lineend = \"round\", size = 0.2) +\n      guides(color = \"none\") +\n      scale_color_manual(values = c('No goal' = \"#FF0000\", Goal = \"#008B45\"))\n    \n    ggplotly(shot_plot, tooltip = \"text\")\n  })\n  \n  #### Tables and numbers in second tab ----\n  ### Updating ui (e.g. sliders & select input values)\n  observe({\n    req(input$file)\n    \n    shot_data <- read_excel(input$file$datapath, sheet = 1)\n    shot_data <- shot_data %>% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %>%\n      separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',\n                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))\n    match_stats <- read_excel(input$file$datapath, sheet = 2)\n    shot_data <- shot_data %>% inner_join(match_stats, by = \"Week\")\n    how_many_aside_sorted <- sort(unique(match_stats$`How many aside`))\n    \n    updateSelectInput(session, \"aside_for_calculations\", choices = c(\"Any\", how_many_aside_sorted), selected = \"Any\")\n    updateSelectInput(session, \"result_for_calculations\", choices = c(\"Any\", unique(match_stats$`Team result`)))\n  })\n  \n  ### Based on teams result\n  ## For filters using match stats\n  match_stats_calculations <- reactive({\n    req(input$file)\n    match_stats <- read_excel(input$file$datapath, sheet = 2)\n    req(input$result_for_calculations)\n    if (input$result_for_calculations != \"Any\") {\n      filtered_stats <- match_stats[match_stats$`Team result` == input$result_for_calculations, ]\n      return(filtered_stats)\n    } else {\n      return(match_stats)\n    }\n  })\n  \n  # Goals per game\n  output$goals_per_game_based_on_result <- renderText({\n    filtered_data <- match_stats_calculations()\n    games <- nrow(filtered_data)\n    if (games > 0) {\n      goals <- sum(filtered_data$Goals)\n      goals_per_game <- goals / games\n      return(round(goals_per_game, 2))\n    } else {\n      return(\"No data available\")\n    }\n  })\n  \n  # Conversion rate\n  output$goals_per_shot_based_on_result <- renderText({\n    filtered_data <- match_stats_calculations()\n    games <- nrow(filtered_data)\n    if (games > 0) {\n      goals <- sum(filtered_data$Goals)\n      shots <- sum(filtered_data$Shots)\n      goals_per_shot <- goals / shots\n      return(percent(goals_per_shot))\n    } else {\n      return(\"No data available\")\n    }\n  })\n  \n  ## For filters using shot and goal stats\n  # Shot stats\n  shot_stats_calculations <- reactive({\n    req(input$file)\n    shot_data <- read_excel(input$file$datapath, sheet = 1)\n    shot_data <- shot_data %>% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %>%\n      separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',\n                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))\n    match_stats <- read_excel(input$file$datapath, sheet = 2)\n    shot_data <- shot_data %>% inner_join(match_stats, by = \"Week\")\n    req(input$result_for_calculations)\n    if (input$result_for_calculations != \"Any\") {\n      filtered_shot_stats <- shot_data[shot_data$`Team result` == input$result_for_calculations, ]\n      return(filtered_shot_stats)\n    } else {\n      return(shot_data)\n    }\n  })\n  \n  # Goal stats\n  goal_stats_calculations <- reactive({\n    req(input$file)\n    shot_data <- read_excel(input$file$datapath, sheet = 1)\n    shot_data <- shot_data %>% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %>%\n      separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',\n                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))\n    match_stats <- read_excel(input$file$datapath, sheet = 2)\n    shot_data <- shot_data %>% inner_join(match_stats, by = \"Week\")\n    goal_data <- shot_data %>% filter(Outcome == \"Goal\")\n    req(input$result_for_calculations)\n    if (input$result_for_calculations != \"Any\") {\n      filtered_goal_stats <- goal_data[goal_data$`Team result` == input$result_for_calculations, ]\n      return(filtered_goal_stats)\n    } else {\n      return(goal_data)\n    }\n  })\n  \n  # Conversion rate of first time shots\n  output$goals_by_first_time_shots_based_on_result <- renderDataTable({\n    filtered_shot_data <- shot_stats_calculations()\n    filtered_goal_data <- goal_stats_calculations()\n    goals <- nrow(filtered_goal_data)\n    if (goals > 0) {\n      conversion_rate_by_first_time <- calculate_conversion_rate_by_first_time(filtered_shot_data, filtered_goal_data)\n      return(conversion_rate_by_first_time)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  # Conversion rate by foot\n  output$goals_by_foot_based_on_result <- renderDataTable({\n    filtered_shot_data <- shot_stats_calculations()\n    filtered_goal_data <- goal_stats_calculations()\n    goals <- nrow(filtered_goal_data)\n    if (goals > 0) {\n      conversion_rate_by_foot <- calculate_conversion_rate_by_foot(filtered_shot_data, filtered_goal_data)\n      return(conversion_rate_by_foot)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  # Conversion rate by type of shot\n  output$goals_by_shot_type_based_on_result <- renderDataTable({\n    filtered_shot_data <- shot_stats_calculations()\n    filtered_goal_data <- goal_stats_calculations()\n    goals <- nrow(filtered_goal_data)\n    if (goals > 0) {\n      conversion_rate_by_type_of_shot <- calculate_conversion_rate_by_type_of_shot(filtered_shot_data, filtered_goal_data)\n      return(conversion_rate_by_type_of_shot)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  \n  ### Based on how many aside\n  ## For filters using match stats\n  match_stats_calculations_aside <- reactive({\n    req(input$file)\n    match_stats <- read_excel(input$file$datapath, sheet = 2)\n    req(input$aside_for_calculations)\n    if (input$aside_for_calculations != \"Any\") {\n      filtered_stats_aside <- match_stats[match_stats$`How many aside` %in% input$aside_for_calculations, ]\n    } else {\n      filtered_stats_aside <- match_stats\n    }\n    return(filtered_stats_aside)\n  })\n  \n  # Goals per game\n  output$goals_per_game_based_on_aside <- renderText({\n    filtered_data_aside <- match_stats_calculations_aside()\n    games <- nrow(filtered_data_aside)\n    if (games > 0) {\n      goals <- sum(filtered_data_aside$Goals)\n      goals_per_game <- goals / games\n      return(round(goals_per_game, 2))\n    } else {\n      return(\"No data available\")\n    }\n  })\n  \n  # Conversion rate\n  output$goals_per_shot_based_on_aside <- renderText({\n    filtered_data_aside <- match_stats_calculations_aside()\n    games <- nrow(filtered_data_aside)\n    if (games > 0) {\n      goals <- sum(filtered_data_aside$Goals)\n      shots <- sum(filtered_data_aside$Shots)\n      goals_per_shot <- goals / shots\n      return(percent(goals_per_shot))\n    } else {\n      return(\"No data available\")\n    }\n  })\n  \n  ## For filters using shot and goal stats\n  # Shot stats\n  shot_stats_calculations_aside <- reactive({\n    req(input$file)\n    shot_data <- read_excel(input$file$datapath, sheet = 1)\n    shot_data <- shot_data %>% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %>%\n      separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',\n                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))\n    match_stats <- read_excel(input$file$datapath, sheet = 2)\n    shot_data <- shot_data %>% inner_join(match_stats, by = \"Week\")\n    req(input$aside_for_calculations)\n    if (input$aside_for_calculations != \"Any\") {\n      filtered_shot_stats_aside <- shot_data[shot_data$`How many aside` %in% input$aside_for_calculations, ]\n      return(filtered_shot_stats_aside)\n    } else {\n      return(shot_data)\n    }\n  })\n  \n  # Goal stats\n  goal_stats_calculations_aside <- reactive({\n    req(input$file)\n    shot_data <- read_excel(input$file$datapath, sheet = 1)\n    shot_data <- shot_data %>% separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %>%\n      separate(\"End location\", into = c(\"x_end_location\", \"y_end_location\"), sep = \", \", convert = T)\n    shot_data$Outcome_filter <- ifelse(shot_data$Outcome == 'Goal', 'Goal', 'No goal')\n    shot_data$Outcome_colour <- ifelse(shot_data$Outcome == 'Goal', 'Goal',\n                                       ifelse(shot_data$Outcome == 'Blocked', 'Blocked', 'No goal'))\n    match_stats <- read_excel(input$file$datapath, sheet = 2)\n    shot_data <- shot_data %>% inner_join(match_stats, by = \"Week\")\n    goal_data <- shot_data %>% filter(Outcome == \"Goal\")\n    req(input$aside_for_calculations)\n    if (input$aside_for_calculations != \"Any\") {\n      filtered_goal_stats_aside <- goal_data[goal_data$`How many aside` %in% input$aside_for_calculations, ]\n      return(filtered_goal_stats_aside)\n    } else {\n      return(goal_data)\n    }\n  })\n  \n  # Conversion rate of first time shots\n  output$goals_by_first_time_shots_based_on_aside <- renderDataTable({\n    filtered_shot_data_aside <- shot_stats_calculations_aside()\n    filtered_goal_data_aside <- goal_stats_calculations_aside()\n    goals <- nrow(filtered_goal_data_aside)\n    if (goals > 0) {\n      conversion_rate_by_first_time_aside <- calculate_conversion_rate_by_first_time(filtered_shot_data_aside, filtered_goal_data_aside)\n      return(conversion_rate_by_first_time_aside)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  # Conversion rate by foot\n  output$goals_by_foot_based_on_aside <- renderDataTable({\n    filtered_shot_data_aside <- shot_stats_calculations_aside()\n    filtered_goal_data_aside <- goal_stats_calculations_aside()\n    goals <- nrow(filtered_goal_data_aside)\n    if (goals > 0) {\n      conversion_rate_by_foot_aside <- calculate_conversion_rate_by_foot(filtered_shot_data_aside, filtered_goal_data_aside)\n      return(conversion_rate_by_foot_aside)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  # Conversion rate by type of shot\n  output$goals_by_shot_type_based_on_aside <- renderDataTable({\n    filtered_shot_data_aside <- shot_stats_calculations_aside()\n    filtered_goal_data_aside <- goal_stats_calculations_aside()\n    goals <- nrow(filtered_goal_data_aside)\n    if (goals > 0) {\n      conversion_rate_by_type_of_shot_aside <- calculate_conversion_rate_by_type_of_shot(filtered_shot_data_aside, filtered_goal_data_aside)\n      return(conversion_rate_by_type_of_shot_aside)\n    } else {\n      return(\"No data available\")\n    }\n  }, options = list(\n    searching = FALSE, # Disable search\n    paging = FALSE,    # Disable pagination\n    lengthMenu = list(c(-1), c(\"All\")),  # Show all entries\n    dom = 't' # Don't show any additional information\n  ))\n  \n  \n  #### Table with full weekly stats ----\n  weekly_stats <- reactive({\n    req(input$file)\n    \n    match_stats <- read_excel(input$file$datapath, sheet = 2)\n    \n    return(match_stats)\n  })\n  \n  output$stats_table <- renderDataTable(\n    weekly_stats(),\n    options = list(lengthMenu = c(10, 25, 50), pageLength = 10)\n  )\n  \n  #### Heatmap ----\n  heatmap_data <- reactive({\n    req(input$file)\n    \n    shot_heatmap_data <- read_excel(input$file$datapath, sheet = 1) %>%\n      select(\"Outcome\", \"Location\") %>%\n      separate(Location, into = c(\"x_shot_location\", \"y_shot_location\"), sep = \", \", convert = T) %>%\n      filter(Outcome != \"Blocked\")\n    shot_heatmap_data$Outcome <- ifelse(shot_heatmap_data$Outcome == 'Goal', 1, 0)\n    \n    shot_heatmap_data <- shot_heatmap_data %>%\n      mutate(y_shot_location = ifelse(y_shot_location >= 0 & y_shot_location <= 10, 5,\n                                      ifelse(y_shot_location > 10 & y_shot_location <= 20, 15,\n                                             ifelse(y_shot_location > 20 & y_shot_location <= 30, 25,\n                                                    ifelse(y_shot_location > 30 & y_shot_location <= 40, 35, y_shot_location)))))\n    \n    shot_heatmap_data <- shot_heatmap_data %>%\n      mutate(x_shot_location = ifelse(x_shot_location >= 0 & x_shot_location <= 10, 5,\n                                      ifelse(x_shot_location > 10 & x_shot_location <= 20, 15,\n                                             ifelse(x_shot_location > 20 & x_shot_location <= 30, 25,\n                                                    ifelse(x_shot_location > 30 & x_shot_location <= 40, 35,\n                                                           ifelse(x_shot_location > 40 & x_shot_location <= 50, 45,\n                                                                  ifelse(x_shot_location > 50 & x_shot_location <= 60, 55, x_shot_location)))))))\n    \n    goals_heatmap <- shot_heatmap_data %>%\n      group_by(x_shot_location, y_shot_location) %>%\n      summarise(goals = sum(Outcome))\n    \n    shots_heatmap <- shot_heatmap_data %>%\n      group_by(x_shot_location, y_shot_location) %>%\n      summarise(shots = n())\n    \n    football_heatmap <- left_join(goals_heatmap, shots_heatmap, by = c(\"x_shot_location\", \"y_shot_location\"))\n    football_heatmap <- football_heatmap %>% mutate(`Conversion rate` = round((goals/shots)*100, 0))\n    \n    return(football_heatmap)\n  })\n  \n  output$heatmap <- renderPlotly({\n    football_heatmap <- heatmap_data()\n    \n    if (is.null(football_heatmap)) {\n      return(NULL)\n    }\n    \n    # create markings on football pitch\n    football_pitch_lines <- data.frame(\n      x = c(0, 30, 60, 0, 0),\n      y = c(0, 0, 0, 0, 40),\n      xend = c(0, 30, 60, 60, 60),\n      yend = c(40, 40, 40, 0, 40)\n    )\n    center_circle <- circle_function_heatmap(center = c(30,20))\n    penalty_arc_att <- circle_function_heatmap(center = c(20, -60), npoints = 1000, end = 1, rotation_angle = pi / 2)\n    penalty_arc_def <- circle_function_heatmap(center = c(20, 0), npoints = 1000, end = 1, rotation_angle = pi / 2)\n    penalty_arc_def$x <- -penalty_arc_def$x\n    penalty_spot_att <- circle_function_heatmap(center = c(7,20), diameter = 0.2)\n    penalty_spot_def <- circle_function_heatmap(center = c(53,20), diameter = 0.2)\n    \n    custom_colours <- c(\"royalblue3\", \"dodgerblue2\", \"deepskyblue\", \"turquoise\", \"springgreen\", \"seagreen4\", \"green4\")\n    \n    heatmap_with_pitch <- ggplot(football_heatmap, aes(x_shot_location, y_shot_location)) +\n      geom_tile(aes(fill=`Conversion rate`, text = paste0(\"Conversion rate: \", `Conversion rate`, \"%\", \"\\nGoals: \", goals, \"\\nShots: \", shots)), size = 3) +\n      scale_fill_gradientn(colors = custom_colours) +\n      theme_classic() +\n      theme(panel.background = element_rect(fill = 'black'),\n            axis.line = element_blank(),\n            axis.text = element_blank(),\n            axis.ticks = element_blank(),\n            axis.title = element_blank(),\n            legend.position = \"none\") +\n      geom_segment(data = football_pitch_lines, aes(x = x, y = y, xend = xend, yend = yend), color = \"white\", size = 1) +\n      geom_point(data = center_circle, aes(x = x, y = y), color = \"white\", size = 0.2) +\n      geom_point(data = penalty_arc_att, aes(x = x, y = y), color = \"white\", size = 0.2) +\n      geom_point(data = penalty_arc_def, aes(x = x, y = y), color = \"white\", size = 0.2) +\n      geom_point(data = penalty_spot_att, aes(x = x, y = y), color = \"white\", size = 0.6) +\n      geom_point(data = penalty_spot_def, aes(x = x, y = y), color = \"white\", size = 0.6)\n    \n    plotly_heatmap <- ggplotly(heatmap_with_pitch, tooltip = \"text\") %>%\n      layout(autosize = TRUE,  margin = list(autoexpand = TRUE), height = 700, width = 1200)\n    \n    return(plotly_heatmap)\n    \n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  }
]